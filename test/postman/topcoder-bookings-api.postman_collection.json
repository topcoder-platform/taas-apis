{
	"info": {
		"_postman_id": "fe3226aa-80f8-4009-8dfa-5db4bf3788b9",
		"name": "Topcoder-bookings-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health",
			"item": [
				{
					"name": "health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for es processor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function sleep (ms) {\r",
									"  return new Promise(resolve => setTimeout(resolve, ms))\r",
									"}\r",
									"sleep(10000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Jobs",
			"item": [
				{
					"name": "Create Job",
					"item": [
						{
							"name": "create job successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(iterationData.get('saveId'), response.id);\r",
											"        delete response.id\r",
											"        delete response.createdAt\r",
											"        delete response.updatedAt\r",
											"        pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Job",
					"item": [
						{
							"name": "get job successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job successfully fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get job by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search jobs successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "search jobs by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "search jobs by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "search jobs by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Job",
					"item": [
						{
							"name": "fully update job successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Job",
					"item": [
						{
							"name": "delete job by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete job by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete job by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete job successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{{{jobId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{{{jobId}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Job Candidate",
			"item": [
				{
					"name": "Create Job Candidate",
					"item": [
						{
							"name": "create job candidate successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(iterationData.get('saveId'), response.id);\r",
											"        delete response.id\r",
											"        delete response.jobId\r",
											"        delete response.createdAt\r",
											"        delete response.updatedAt\r",
											"        pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Job Candidate",
					"item": [
						{
							"name": "get job candidate successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job candidate successfully fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get job candidate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job candidate by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get job candidate by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search job candidates successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "search job candidates by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "search job candidates by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "search job candidates by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Job Candidate",
					"item": [
						{
							"name": "fully update job candidate successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job candidate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job candidate by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job candidate by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job candidate by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update job candidate by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job candidate successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job candidate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job candidate by no member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job candidate by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update job candidate by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Job Candidate",
					"item": [
						{
							"name": "delete job candidate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete job candidate by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete job candidate by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete job candidate successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Resource Booking",
			"item": [
				{
					"name": "Create Resource Booking",
					"item": [
						{
							"name": "create resource booking successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(iterationData.get('saveId'), response.id);\r",
											"        delete response.id\r",
											"        delete response.jobId\r",
											"        delete response.createdAt\r",
											"        delete response.updatedAt\r",
											"        pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Resource Booking",
					"item": [
						{
							"name": "add dates to resource booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking successfully fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking successfully fromDb with parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking successfully with parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get resource booking by invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search resource booking successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "search resource booking by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "search resource booking by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "search resource booking by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Resource Booking",
					"item": [
						{
							"name": "fully update resource booking successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update resource booking by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update resource booking by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update resource booking by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update resource booking by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update resource booking by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update resource booking successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update resource booking by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update resource booking by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update resource booking by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update resource booking by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Resource Booking",
					"item": [
						{
							"name": "delete resource booking by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete resource booking by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete resource booking by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete resource booking successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{{{resourceBookingId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{{{resourceBookingId}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Work Period",
			"item": [
				{
					"name": "Create Work Period",
					"item": [
						{
							"name": "create work period successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(iterationData.get('saveId'), response.id);\r",
											"        delete response.id\r",
											"        delete response.resourceBookingId\r",
											"        delete response.createdAt\r",
											"        delete response.updatedAt\r",
											"        pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Work Period",
					"item": [
						{
							"name": "get work period successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.resourceBookingId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period successfully fomDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.resourceBookingId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Work Period",
					"item": [
						{
							"name": "fully update work period successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.resourceBookingId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.resourceBookingId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Work Period",
					"item": [
						{
							"name": "delete work period by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete work period by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete work period by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete work period with paid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete work period successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods/{{{{workPeriodId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods",
										"{{{{workPeriodId}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Work Period Payment",
			"item": [
				{
					"name": "Create Work Period Payment",
					"item": [
						{
							"name": "create work period payment successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(iterationData.get('saveId'), response.id);\r",
											"        delete response.id\r",
											"        delete response.workPeriodId\r",
											"        delete response.createdAt\r",
											"        delete response.updatedAt\r",
											"        pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period payment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period payment by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period payment by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period payment without billing account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period payment by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period payment by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Work Period Payment",
					"item": [
						{
							"name": "get work period payment successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.workPeriodId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period payment successfully fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.workPeriodId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period payment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period payment by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get work period payment by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period payment successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period payment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period payment by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "search work period payment by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Work Period Payment",
					"item": [
						{
							"name": "fully update work period payment successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.workPeriodId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period payment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period payment by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period payment by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period payment by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update work period payment by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period payment successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.workPeriodId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period payment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period payment by no admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period payment by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update work period payment by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-period-payments/{{{{workPeriodPaymentId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-period-payments",
										"{{{{workPeriodPaymentId}}}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Interview",
			"item": [
				{
					"name": "Request Interview",
					"item": [
						{
							"name": "request interview successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(iterationData.get('saveId'), response.id);\r",
											"        delete response.id\r",
											"        delete response.jobCandidateId\r",
											"        delete response.createdAt\r",
											"        delete response.updatedAt\r",
											"        pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						},
						{
							"name": "request interview by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						},
						{
							"name": "request interview by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						},
						{
							"name": "request interview exceeded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						},
						{
							"name": "request interview by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						},
						{
							"name": "request interview by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						},
						{
							"name": "request interview by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"requestInterview"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Interview",
					"item": [
						{
							"name": "get interview by id successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobCandidateId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/getInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by id successfully fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobCandidateId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/getInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by id by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/getInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by id by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/getInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by id by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/getInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"getInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by round successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobCandidateId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by round successfully fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobCandidateId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews/{{interviewRound}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews",
										"{{interviewRound}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by round by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by round by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get interview by round by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "search interviews successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "search interviews by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "search interviews by non member of project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "search interviews by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const params = iterationData.get('requestParameters')\r",
											"Object.keys(params).forEach(param => {\r",
											"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/interviews",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"interviews"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Interview",
					"item": [
						{
							"name": "update interview by id successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobCandidateId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/updateInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"updateInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by id by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/updateInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"updateInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by id by nonexistent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/updateInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"updateInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by id by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/updateInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"updateInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by id by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/updateInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"updateInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update completed interview by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/updateInterview/{{{{interviewId}}}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"updateInterview",
										"{{{{interviewId}}}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update completed interview by round",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/updateInterview/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"updateInterview",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by round successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    delete response.id\r",
											"    delete response.jobCandidateId\r",
											"    delete response.createdAt\r",
											"    delete response.updatedAt\r",
											"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/updateInterview/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"updateInterview",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by round by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/updateInterview/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"updateInterview",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by round by non existent ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/updateInterview/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"updateInterview",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by round by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/updateInterview/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"updateInterview",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update interview by round by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData;\r",
											"const httpStatus = iterationData.get('httpStatus');\r",
											"pm.test(`Status code is ${httpStatus}`, function () {\r",
											"    pm.response.to.have.status(httpStatus);\r",
											"    const response = pm.response.json()\r",
											"    const rg = new RegExp(iterationData.get('message'))\r",
											"    pm.expect(rg.test(response.message)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{{{token}}}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{{{jobCandidateId}}}}/updateInterview/{{interviewRound}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{{{jobCandidateId}}}}",
										"updateInterview",
										"{{interviewRound}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Taas Teams",
			"item": [
				{
					"name": "search teams successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    _.each(response, project => {\r",
									"        _.each(project.resources, resource => {\r",
									"            delete resource.id\r",
									"        })\r",
									"    })\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const params = iterationData.get('requestParameters')\r",
									"Object.keys(params).forEach(param => {\r",
									"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "search teams by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "search teams by invalid field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const params = iterationData.get('requestParameters')\r",
									"Object.keys(params).forEach(param => {\r",
									"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "send email successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "send email by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "send email by invalid field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "send email by missing field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "search skills successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const params = iterationData.get('requestParameters')\r",
									"Object.keys(params).forEach(param => {\r",
									"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/skills",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "search skills by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/skills",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"skills"
							]
						}
					},
					"response": []
				},
				{
					"name": "get me successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/me",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "get me by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/me",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "get team successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    _.each(response.resources, resource => {\r",
									"        delete resource.id\r",
									"        delete resource.jobId\r",
									"    })\r",
									"    _.each(response.jobs, job => {\r",
									"        delete job.id\r",
									"    })\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get team by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get team by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get team job successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    delete response.id\r",
									"    _.each(response.candidates, candidate => {\r",
									"        delete candidate.id\r",
									"        _.each(candidate.interviews, interview => {\r",
									"        delete interview.createdAt\r",
									"        delete interview.updatedAt\r",
									"        delete interview.jobCandidateId\r",
									"        delete interview.id\r",
									"        })\r",
									"    })\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/jobs/{{{{jobId}}}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"jobs",
								"{{{{jobId}}}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get team job by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/jobs/{{{{jobId}}}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"jobs",
								"{{{{jobId}}}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get team job by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/jobs/{{{{jobId}}}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"jobs",
								"{{{{jobId}}}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add members successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "add members by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "add members by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "add members by invalid field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "search members successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const params = iterationData.get('requestParameters')\r",
									"Object.keys(params).forEach(param => {\r",
									"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "search members by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "search members by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "search invites successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response).to.deep.eq(iterationData.get('responseBody'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const params = iterationData.get('requestParameters')\r",
									"Object.keys(params).forEach(param => {\r",
									"  pm.request.addQueryParams(`${param}=${params[param]}`)  \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/invites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "search invites by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/invites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "search invites by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/invites",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete member successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members/{{memberId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete member by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members/{{memberId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members",
								"{{memberId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete member by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData;\r",
									"const httpStatus = iterationData.get('httpStatus');\r",
									"pm.test(`Status code is ${httpStatus}`, function () {\r",
									"    pm.response.to.have.status(httpStatus);\r",
									"    const response = pm.response.json()\r",
									"    const rg = new RegExp(iterationData.get('message'))\r",
									"    pm.expect(rg.test(response.message)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{{{token}}}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/{{teamId}}/members/{{memberId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{teamId}}",
								"members",
								"{{memberId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}