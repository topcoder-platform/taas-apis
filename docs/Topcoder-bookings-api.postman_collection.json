{
	"info": {
		"_postman_id": "0945e4c8-2066-4096-a82d-1ce6a0b0c0fe",
		"name": "Topcoder-bookings-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Jobs",
			"item": [
				{
					"name": "create job with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobId\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobIdCreatedByM2M\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_create_job}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job with member success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobIdCreatedByMember\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"56fdc405-eccc-4189-9e83-c78abf844f50\",\n    \"f91ae184-aba2-4485-a8cb-9336988c05ab\",\n    \"edfc7b4f-636f-44bd-96fc-949ffc58e38b\",\n    \"4ca63bb6-f515-4ab0-a6bc-c2d8531e084f\",\n    \"ee03c041-d53b-4c08-b7d9-80d7461da3e4\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"56fdc405-eccc-4189-9e83-c78abf844f50\",\n    \"f91ae184-aba2-4485-a8cb-9336988c05ab\",\n    \"edfc7b4f-636f-44bd-96fc-949ffc58e38b\",\n    \"4ca63bb6-f515-4ab0-a6bc-c2d8531e084f\",\n    \"ee03c041-d53b-4c08-b7d9-80d7461da3e4\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job with m2m read",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_job}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job with booking manager from db",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get job with connect user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job with member",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search jobs with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "21",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "1212",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Dummy",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27T04:17:23.131Z",
									"disabled": true
								},
								{
									"key": "resourceType",
									"value": "Dummy Resource Type",
									"disabled": true
								},
								{
									"key": "skill",
									"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "sourcing",
									"disabled": true
								},
								{
									"key": "workload",
									"value": "full-time",
									"disabled": true
								},
								{
									"key": "title",
									"value": "dummy",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search jobs with request body",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"jobIds\": [\"{{jobId}}\",\"{{jobIdCreatedByM2M}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "21",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "1212",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Dummy",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27T04:17:23.131Z",
									"disabled": true
								},
								{
									"key": "resourceType",
									"value": "Dummy Resource Type",
									"disabled": true
								},
								{
									"key": "skill",
									"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "sourcing",
									"disabled": true
								},
								{
									"key": "workload",
									"value": "full-time",
									"disabled": true
								},
								{
									"key": "title",
									"value": "dummy",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search jobs with with m2m all",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_job}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "21",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "1212",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Dummy",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27T04:17:23.131Z",
									"disabled": true
								},
								{
									"key": "resourceType",
									"value": "Dummy Resource Type",
									"disabled": true
								},
								{
									"key": "skill",
									"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "sourcing",
									"disabled": true
								},
								{
									"key": "workload",
									"value": "full-time",
									"disabled": true
								},
								{
									"key": "title",
									"value": "dummy",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search jobs with connect user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "4",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "21",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "1212",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Dummy Description",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27T04:17:23.131Z",
									"disabled": true
								},
								{
									"key": "resourceType",
									"value": "Dummy Resource Type",
									"disabled": true
								},
								{
									"key": "skill",
									"value": "ee03c041-d53b-4c08-b7d9-80d7461da3e4",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "sourcing",
									"disabled": true
								},
								{
									"key": "workload",
									"value": "full-time",
									"disabled": true
								},
								{
									"key": "title",
									"value": "dummy",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search jobs with member",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "4",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "21",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "1212",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Dummy Description",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27T04:17:23.131Z",
									"disabled": true
								},
								{
									"key": "resourceType",
									"value": "Dummy Resource Type",
									"disabled": true
								},
								{
									"key": "skill",
									"value": "ee03c041-d53b-4c08-b7d9-80d7461da3e4",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "sourcing",
									"disabled": true
								},
								{
									"key": "workload",
									"value": "fractional",
									"disabled": true
								},
								{
									"key": "title",
									"value": "dummy",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search jobs with invalid token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"url": {
							"raw": "{{URL}}/jobs",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "page",
									"value": "4",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "21",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "1212",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Dummy Description",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27T04:17:23.131Z",
									"disabled": true
								},
								{
									"key": "resourceType",
									"value": "Dummy Resource Type",
									"disabled": true
								},
								{
									"key": "skill",
									"value": "ee03c041-d53b-4c08-b7d9-80d7461da3e4",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "sourcing",
									"disabled": true
								},
								{
									"key": "workload",
									"value": "full-time",
									"disabled": true
								},
								{
									"key": "title",
									"value": "dummy",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with booking manager",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with m2m update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_job}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with connect user",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"cc41ddc4-cacc-4570-9bdb-1229c12b9784\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with member 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description updated\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with member success",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description updated\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with member with user id not exist",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"cc41ddc4-cacc-4570-9bdb-1229c12b9784\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job with invalid token",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"cc41ddc4-cacc-4570-9bdb-1229c12b9784\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with booking manager",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with m2m update",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_job}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with connect user",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with member 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description updated 2\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with member success",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description updated 2\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with user id not exist",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job with invalid token",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job with booking manager",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job with m2m delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_delete_job}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job with connect user",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job with member 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job with member success",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobIdCreatedByMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobIdCreatedByMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job with invalid token",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Job Candidates",
			"item": [
				{
					"name": "create job candidate with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobCandidateId\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job candidate with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobCandidateIdCreatedByM2M\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_create_job_candidate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobIdCreatedByM2M}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job candidate with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobCandidateId\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job candidate with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobCandidateId\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job candidate with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jobCandidateId\",data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							]
						}
					},
					"response": []
				},
				{
					"name": "create job candidate with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with m2m read",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_job_candidate}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with m2m (read jobCandidate & interview) - included interviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_jobCandidate_read_interviews}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with m2m (read jobCandidate & all interview) - included interviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_jobCandidates_all_interviews}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with m2m (read jobCandidate) - interviews not included",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_job_candidate}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with booking manager from db",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with connect user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get job candidate with member",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with m2m all",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_job_candidate}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with m2m (read jobCandidate & read interview) - included interviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_jobCandidate_read_interviews}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with m2m (read jobCandidate & all interview) - included interviews",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_jobCandidates_all_interviews}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with m2m (read jobCandidate) - interviews not included",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_job_candidate}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with connect user",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with member",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates?sortBy=id&sortOrder=asc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search job candidates with invalid token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates?sortBy=id&sortOrder=asc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "jobId",
									"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
									"disabled": true
								},
								{
									"key": "status",
									"value": "selected",
									"disabled": true
								},
								{
									"key": "externalId",
									"value": "300234321",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put job candidate with booking manager",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job candidate with m2m update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_job_candidate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobIdCreatedByM2M}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job candidate with connect user",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job candidate with member",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job candidate with user id not exist",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put job candidate with invalid token",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job candidate with booking manager",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job candidate with m2m update",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_job_candidate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job candidate with connect user",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job candidate with member",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job candidate with user id not exist",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch job candidate with invalid token",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"selected\",\n  \"externalId\": \"300234321\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job candidate with member",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job candidate with connect user",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job candidate with booking manager",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete job candidate with m2m delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_delete_job_candidate}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Interviews",
			"item": [
				{
					"name": "Before Test",
					"item": [
						{
							"name": "create job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_bookingManager}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"88774632\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobCandidateId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\",\n  \"externalId\": \"88774631\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobCandidateId_2\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\",\n  \"externalId\": \"88774631\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobCandidateId_3\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\",\n  \"externalId\": \"88774631\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobCandidateId_4\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\",\n  \"externalId\": \"88774631\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job candidate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobCandidateId_5\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\",\n  \"externalId\": \"88774631\",\n  \"resume\": \"http://example.com\",\n  \"remark\": \"excellent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create completed interview",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"completedInterviewJobCandidateId\", response.jobCandidateId);\r",
											"        pm.environment.set(\"completedInterviewRound\", response.round);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_bookingManager}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"status\": \"Completed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{jobCandidateId}}",
										"requestInterview"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Request interview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"interviewId\", response.id);\r",
									"        pm.environment.set(\"interviewRound\", response.round);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"guestEmails\": [\"attendee1@yopmail.com\", \"attendee2@yopmail.com\"],\r\n    \"status\": \"Scheduling\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview for the same jobCandidateId - should increment round",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    const lastRound = pm.environment.get(\"interviewRound\");\r",
									"    pm.expect(response.round).to.eq(lastRound + 1);\r",
									"    pm.environment.set(\"interviewRound\", response.round);\r",
									"    pm.environment.set(\"interviewId\", response.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"status\": \"Scheduling\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request 4th interview - should not allow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You've reached the maximum allowed number (3) of interviews for this candidate.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview without status - should take default status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"interviewRound\", response.round);\r",
									"        pm.expect(response.status).to.eq(\"Scheduling\")\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_2}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_2}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.status\\\" must be one of [Scheduling, Scheduled, Requested for reschedule, Rescheduled, Completed, Cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"status\": \"xxxx\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with guestEmails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.guestEmails[0]).to.eq(\"attendee1@yopmail.com\")\r",
									"    pm.expect(response.guestEmails[1]).to.eq(\"attendee2@yopmail.com\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"guestEmails\": [\"attendee1@yopmail.com\", \"attendee2@yopmail.com\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_2}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_2}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with invalid guestEmails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.guestEmails\\\" must be an array\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"guestEmails\": \"asddd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with invalid guest email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.guestEmails[0]\\\" must be a valid email\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"guestEmails\": [\"asdas\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with round - should not accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.round\\\" is not allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"round\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with startTimestamp - should not accept",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.startTimestamp\\\" is not allowed\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"startTimestamp\": \"2021-04-17\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview without templateUrl - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.templateUrl\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Scheduling\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with invalid templateUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"interview.templateUrl\\\" must be one of [interview-30, interview-60]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"asdas\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with non-existing jobCandidate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"The job candidate with id=9105f597-f9d5-49c0-9cbf-9a0cbda47260 doesn't exist.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/9105f597-f9d5-49c0-9cbf-9a0cbda47260/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"9105f597-f9d5-49c0-9cbf-9a0cbda47260",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with non-existing userId in token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_userId_not_exist}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_2}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_2}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_administrator}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_3}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_3}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_3}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_3}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with m2m (all interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_all_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_3}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_3}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with m2m (create interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_create_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_4}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_4}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with m2m (read interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_read_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with m2m (update interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_update_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with connect manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_4}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_4}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connectUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_4}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_4}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_member}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_5}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_5}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"No token provided.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request interview with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/requestInterview",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"requestInterview"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/getInterview/{{interviewId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"getInterview",
								"{{interviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by id fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/getInterview/{{interviewId}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"getInterview",
								"{{interviewId}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by round",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview fromDb by round",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by negative round",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"round\\\" must be a positive number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/-1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by round=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"round\\\" must be a positive number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/0",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by non-existing round",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Interview doesn't exist with round: 999\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/999",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_administrator}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with m2m (all interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_all_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with m2m (read interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_read_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with m2m (create interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_create_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with m2m (update interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_update_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with connect manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connectUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_member}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by round without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"No token provided.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by round with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"dummyIdXX\",\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId_4}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId_4}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data\\\" must have at least 1 key\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with invalid startTimestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.startTimestamp\\\" must be a valid date\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startTimestamp\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with past startTimestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.startTimestamp\\\" must be greater than \\\"now\\\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startTimestamp\": \"2021-04-01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.status\\\" must be one of [Scheduling, Scheduled, Requested for reschedule, Rescheduled, Completed, Cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with invalid templateUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.templateUrl\\\" must be one of [interview-30, interview-60]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateUrl\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview status to Scheduled without calendarEventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.calendarEventId\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startTimestamp\": \"2030-12-12\",\r\n    \"status\": \"Scheduled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview status to Scheduled without startTimestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.startTimestamp\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\",\r\n    \"status\": \"Scheduled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview status to Rescheduled without calendarEventId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.calendarEventId\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startTimestamp\": \"2030-12-12\",\r\n    \"status\": \"Rescheduled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview status to Rescheduled without startTimestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.startTimestamp\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\",\r\n    \"status\": \"Rescheduled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Completed interview without status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Only the \\\"status\\\" can be updated for Completed interviews.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{completedInterviewJobCandidateId}}/updateInterview/{{completedInterviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{completedInterviewJobCandidateId}}",
								"updateInterview",
								"{{completedInterviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Completed interview with additional fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Only the \\\"status\\\" can be updated for Completed interviews.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\",\r\n    \"status\": \"Scheduling\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{completedInterviewJobCandidateId}}/updateInterview/{{completedInterviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{completedInterviewJobCandidateId}}",
								"updateInterview",
								"{{completedInterviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Completed interview with only status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.status).to.eq(\"Scheduling\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"Scheduling\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{completedInterviewJobCandidateId}}/updateInterview/{{completedInterviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{completedInterviewJobCandidateId}}",
								"updateInterview",
								"{{completedInterviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_administrator}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with m2m (all interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_all_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with m2m (update interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_update_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with m2m (read interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_read_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with m2m (create interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_create_interviews}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with connect manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connectUser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_member}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"calendarEventId\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"No token provided.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customMessage\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_key",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customMessage\": \"sdsds\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/updateInterview/{{interviewRound}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"updateInterview",
								"{{interviewRound}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by xaiId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/getInterview/0edc1751-f4ca-4e8e-908a-95f6560311ab",
							"host": [
								"{{URL}}"
							],
							"path": [
								"getInterview",
								"0edc1751-f4ca-4e8e-908a-95f6560311ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get interview by xaiId fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/getInterview/0edc1751-f4ca-4e8e-908a-95f6560311ab?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"getInterview",
								"0edc1751-f4ca-4e8e-908a-95f6560311ab"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/updateInterview/{{interviewId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"updateInterview",
								"{{interviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update interview by xaiId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\",\r\n    \"calendarEventId\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/updateInterview/0edc1751-f4ca-4e8e-908a-95f6560311ab",
							"host": [
								"{{URL}}"
							],
							"path": [
								"updateInterview",
								"0edc1751-f4ca-4e8e-908a-95f6560311ab"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews by invalid status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"criteria.status\\\" must be one of [Scheduling, Scheduled, Requested for reschedule, Rescheduled, Completed, Cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews?status=xxx",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "xxx"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews by invalid createdAt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"criteria.createdAt\\\" must be a valid date\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews?createdAt=xxxx",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "xxxx"
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews by invalid updatedAt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"criteria.updatedAt\\\" must be a valid date\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews?updatedAt=xxx",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "xxx"
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews by invalid sortOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"criteria.sortOrder\\\" must be one of [desc, asc]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews?sortOrder=xxx",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "xxx"
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews by invalid sortBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"criteria.sortBy\\\" must be one of [round, createdAt, updatedAt]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews?sortBy=xxx",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "xxx"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_administrator}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with m2m (all interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_all_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with m2m (read interview scope)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_read_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with m2m (create interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_create_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with m2m (update interview scope) - should fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_m2m_update_interviews}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with connect manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_connectUser}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_member}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "createdAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "updatedAt",
									"value": "2021-04-13T20:28:37.954Z",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Scheduling",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"No token provided.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search interviews with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/jobCandidates/{{jobCandidateId}}/interviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"jobCandidates",
								"{{jobCandidateId}}",
								"interviews"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resource Bookings",
			"item": [
				{
					"name": "Before Test",
					"item": [
						{
							"name": "create job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_bookingManager}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job with m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobIdCreatedByM2M\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_m2m_create_job}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Extended Search Scenarios",
					"item": [
						{
							"name": "search RB sortBy id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=id&sortOrder=asc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "id"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=status&sortOrder=asc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "status"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,status,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy rateType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=rateType&sortOrder=asc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "rateType"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,rateType,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=10&sortBy=startDate&sortOrder=asc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "startDate"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,startDate,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy endDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=10&sortBy=endDate&sortOrder=asc&fields=id,endDate,workPeriods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "endDate"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,endDate,workPeriods"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy customerRate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=customerRate&sortOrder=asc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "customerRate"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,customerRate,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy memberRate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=memberRate&sortOrder=asc",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "memberRate"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-11",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,workPeriods.id,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,workPeriods.id,workPeriods.startDate",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,workPeriods.id,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,workPeriods.id,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,memberRate,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy workPeriods.userHandle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=10&sortBy=workPeriods.userHandle&workPeriods.startDate=2021-01-03&sortOrder=asc&fields=id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "workPeriods.userHandle"
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle"
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy workPeriods.daysWorked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=10&sortBy=workPeriods.daysWorked&workPeriods.startDate=2021-01-10&sortOrder=asc&fields=id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "10"
										},
										{
											"key": "sortBy",
											"value": "workPeriods.daysWorked"
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-10"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked"
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-16",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.daysWorked,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy workPeriods.customerRate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=workPeriods.customerRate&workPeriods.startDate=2021-01-03&sortOrder=asc&fields=id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "workPeriods.customerRate"
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate"
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.customerRate,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy workPeriods.memberRate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=workPeriods.memberRate&workPeriods.startDate=2021-01-03&sortOrder=asc&fields=id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "workPeriods.memberRate"
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate"
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.memberRate,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search RB sortBy workPeriods.paymentStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/resourceBookings?page=1&perPage=5&sortBy=workPeriods.paymentStatus&workPeriods.startDate=2021-01-03&sortOrder=asc&fields=id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "perPage",
											"value": "5"
										},
										{
											"key": "sortBy",
											"value": "workPeriods.paymentStatus"
										},
										{
											"key": "workPeriods.startDate",
											"value": "2021-01-03"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "sortOrder",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus"
										},
										{
											"key": "status",
											"value": "placed",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,status",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2021-01-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,startDate",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-02-01",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,endDate",
											"disabled": true
										},
										{
											"key": "rateType",
											"value": "weekly",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,rateType",
											"disabled": true
										},
										{
											"key": "jobId",
											"value": "fc58382a-31d7-44b7-bfe5-2d671300f8d9",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,jobId",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "16870",
											"disabled": true
										},
										{
											"key": "projectIds",
											"value": "16870,16805,16739,17091",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,projectId",
											"disabled": true
										},
										{
											"key": "workPeriods.paymentStatus",
											"value": "pending",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,workPeriods.paymentStatus",
											"disabled": true
										},
										{
											"key": "workPeriods.endDate",
											"value": "2021-01-09",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,workPeriods.endDate",
											"disabled": true
										},
										{
											"key": "workPeriods.userHandle",
											"value": "GunaK-TopCoder",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods.id,workPeriods.startDate,workPeriods.paymentStatus,workPeriods.userHandle",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "id,workPeriods",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create resource booking with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"resourceBookingId\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-10-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods of newly created resource booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods?sortBy=startDate&sortOrder=asc&resourceBookingId={{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "startDate"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}"
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create resource booking with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"resourceBookingIdCreatedByM2M\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_create_resource_booking}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobIdCreatedByM2M}}\",\r\n  \"startDate\": \"2020-12-27\",\r\n  \"endDate\": \"2021-01-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods of newly created resource booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods?sortBy=startDate&sortOrder=asc&resourceBookingId={{resourceBookingIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "startDate"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingIdCreatedByM2M}}"
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingIdCreatedByM2M}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create resource booking with m2m all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"resourceBookingIdCreatedByM2M\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_resource_booking}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobIdCreatedByM2M}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-10-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 10,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "create resource booking with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "create resource booking with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "create resource booking with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "create resource booking with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with m2m read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_resource_booking}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with booking manager from db",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate','billingAccountId','userId','jobId','rateType','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt'], field => {\r",
									"        pm.expect(response).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 1 fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate','billingAccountId','userId','jobId','rateType','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt'], field => {\r",
									"        pm.expect(response).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt&fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt"
								},
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate','billingAccountId','userId','jobId','rateType','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt','workPeriods'], field => {\r",
									"        pm.expect(response).to.have.property(field)\r",
									"    })\r",
									"    _.each(['id','projectId','paymentStatus','startDate','endDate','userHandle','resourceBookingId','daysWorked','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt'], field => {\r",
									"        pm.expect(response.workPeriods[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=workPeriods,id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods,id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 2 fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate','billingAccountId','userId','jobId','rateType','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt','workPeriods'], field => {\r",
									"        pm.expect(response).to.have.property(field)\r",
									"    })\r",
									"    _.each(['id','projectId','paymentStatus','startDate','endDate','userHandle','resourceBookingId','daysWorked','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt'], field => {\r",
									"        pm.expect(response.workPeriods[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=workPeriods,id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt&fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods,id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt"
								},
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate'], field => {\r",
									"        pm.expect(response).to.have.property(field)\r",
									"    })\r",
									"    _.each(['id','projectId','startDate','endDate','daysWorked'], field => {\r",
									"        pm.expect(response.workPeriods[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 3 fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate'], field => {\r",
									"        pm.expect(response).to.have.property(field)\r",
									"    })\r",
									"    _.each(['id','projectId','startDate','endDate','daysWorked'], field => {\r",
									"        pm.expect(response.workPeriods[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate&fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate"
								},
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You don't have access to view memberRate\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=memberRate",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "memberRate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 4 fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You don't have access to view memberRate\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=memberRate&fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "memberRate"
								},
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You don't have access to view workPeriods\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_resource_booking}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=workPeriods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get resource booking with parameters 5 fromDb",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You don't have access to view workPeriods\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_resource_booking}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}?fields=workPeriods&fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods"
								},
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "assigned",
									"disabled": true
								},
								{
									"key": "projectIds",
									"value": "111, 16705",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with m2m all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_resource_booking}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "status",
									"value": "assigned",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "page",
									"value": "4",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "page",
									"value": "4",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "page",
									"value": "4",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "3",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2020-09-27",
									"disabled": true
								},
								{
									"key": "rateType",
									"value": "hourly",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate','billingAccountId','userId','jobId','rateType','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt'], field => {\r",
									"        pm.expect(response[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate','billingAccountId','userId','jobId','rateType','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt','workPeriods'], field => {\r",
									"        pm.expect(response[0]).to.have.property(field)\r",
									"    })\r",
									"    _.each(['id','projectId','paymentStatus','startDate','endDate','userHandle','resourceBookingId','daysWorked','memberRate','customerRate','createdBy','updatedBy','createdAt','updatedAt'], field => {\r",
									"        pm.expect(response[0].workPeriods[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods,id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods,id,projectId,status,startDate,endDate,billingAccountId,userId,jobId,rateType,memberRate,customerRate,createdBy,updatedBy,createdAt,updatedAt,deletedAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    _.each(['id','projectId','status','startDate','endDate'], field => {\r",
									"        pm.expect(response[0]).to.have.property(field)\r",
									"    })\r",
									"    _.each(['id','projectId','startDate','endDate','daysWorked'], field => {\r",
									"        pm.expect(response[0].workPeriods[0]).to.have.property(field)\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate,customerRate&workPeriods.startDate=2020-10-25&sortBy=customerRate&sortOrder=asc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate,customerRate"
								},
								{
									"key": "workPeriods.startDate",
									"value": "2020-10-25"
								},
								{
									"key": "sortBy",
									"value": "customerRate"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate,customerRate,memberRate&workPeriods.startDate=2020-10-25&sortBy=workPeriods.daysWorked&sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods.id,workPeriods.projectId,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate,customerRate,memberRate"
								},
								{
									"key": "workPeriods.startDate",
									"value": "2020-10-25"
								},
								{
									"key": "sortBy",
									"value": "workPeriods.daysWorked"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods.id,workPeriods.projectId,workPeriods.userHandle,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate,customerRate,memberRate&projectId=111&workPeriods.startDate=2020-10-18&sortBy=workPeriods.userHandle&sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods.id,workPeriods.projectId,workPeriods.userHandle,workPeriods.startDate,workPeriods.endDate,workPeriods.daysWorked,id,projectId,status,startDate,endDate,customerRate,memberRate"
								},
								{
									"key": "projectId",
									"value": "111"
								},
								{
									"key": "workPeriods.startDate",
									"value": "2020-10-18"
								},
								{
									"key": "sortBy",
									"value": "workPeriods.userHandle"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Can not filter or sort by some field which is not included in fields\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=id&projectId=111",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								},
								{
									"key": "projectId",
									"value": "111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Can not filter or sort by some field which is not included in fields\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods&sortBy=customerRate",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods"
								},
								{
									"key": "sortBy",
									"value": "customerRate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Can not filter or sort by some field which is not included in fields\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?sortBy=workPeriods.paymentStatus",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "workPeriods.paymentStatus"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Can not sort by workPeriod field without filtering by workPeriods.startDate or workPeriods.endDate\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods&sortBy=workPeriods.paymentStatus",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods"
								},
								{
									"key": "sortBy",
									"value": "workPeriods.paymentStatus"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You don't have access to view memberRate\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=memberRate,projectId&projectId=111",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "memberRate,projectId"
								},
								{
									"key": "projectId",
									"value": "111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search resource bookings with parameters 12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You don't have access to view workPeriods\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_resource_booking}}"
							}
						],
						"url": {
							"raw": "{{URL}}/resourceBookings?fields=workPeriods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings"
							],
							"query": [
								{
									"key": "fields",
									"value": "workPeriods"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put resource booking with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-26\",\r\n  \"endDate\": \"2020-11-29\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search extended work periods of resource booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods?sortBy=startDate&sortOrder=asc&resourceBookingId={{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "startDate"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}"
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put resource booking with m2m update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_resource_booking}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobIdCreatedByM2M}}\",\r\n  \"startDate\": \"2020-12-27\",\r\n  \"endDate\": \"2021-01-10\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search reduced work periods of resource booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods?sortBy=startDate&sortOrder=asc&resourceBookingId={{resourceBookingIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "startDate"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingIdCreatedByM2M}}"
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingIdCreatedByM2M}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put resource booking with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put resource booking with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put resource booking with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put resource booking with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"placed\",\r\n    \"startDate\": \"2020-09-30\",\r\n    \"endDate\": \"2020-11-28\",\r\n    \"memberRate\": 13.23,\r\n    \"customerRate\": 13,\r\n    \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking with m2m update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_resource_booking}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"placed\",\r\n    \"startDate\": \"2020-12-30\",\r\n    \"endDate\": \"2021-02-10\",\r\n    \"memberRate\": 13.23,\r\n    \"customerRate\": 13,\r\n    \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-28\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json()\r",
									"    pm.environment.set(\"workPeriodIdForPaid\", response[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods?perPage=1&sortBy=startDate&sortOrder=asc&resourceBookingId={{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "1"
								},
								{
									"key": "sortBy",
									"value": "startDate"
								},
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}"
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period set status to completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"paymentStatus\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodIdForPaid}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodIdForPaid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking to cancelled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"cancelled\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch resource booking to reduce",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startDate\": \"2020-10-04\",\r\n  \"billingAccountId\": 80000071\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete resource booking with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete resource booking with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete resource booking with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete resource booking with m2m delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_delete_resource_booking}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete resource booking with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/resourceBookings/{{resourceBookingId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"resourceBookings",
								"{{resourceBookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Work Periods",
			"item": [
				{
					"name": "Before Test",
					"item": [
						{
							"name": "create job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_bookingManager}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"resourceBookingId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create work period with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"workPeriodId\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"workPeriodIdCreatedByM2M\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_create_work_period}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with missing parameter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.resourceBookingId\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with missing parameter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.endDate\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with missing parameter 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.paymentStatus\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.resourceBookingId\\\" must be a valid GUID\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"aaa-aaa\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.startDate\\\" must be in YYYY-MM-DD format\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"07-03-2021\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"startDate should be always Sunday\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-06\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"endDate should be always the next Saturday\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-14\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.daysWorked\\\" must be a number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": \"aa\",\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(`Key (resource_booking_id, start_date, end_date)=(${pm.environment.get('resourceBookingId')}, 2021-03-07, 2021-03-13) already exists.`)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period with invalid parameter 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriod.paymentStatus\\\" must be one of [pending, partially-completed, completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"paid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period with m2m read 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_work_period}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period with m2m read 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_work_period_and_payment}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period with booking manager from db",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "35",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods with m2m all 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_work_period}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods with m2m all 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_work_period_and_payment}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods with member",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "16843",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work periods with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"url": {
							"raw": "{{URL}}/work-periods",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "5",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "id",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "resourceBookingId",
									"value": "{{resourceBookingId}}",
									"disabled": true
								},
								{
									"key": "resourceBookingIds",
									"value": "{{resourceBookingId}},{{resourceBookingIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "paymentStatus",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2021-03-14",
									"disabled": true
								},
								{
									"key": "endDate",
									"value": "2021-03-20",
									"disabled": true
								},
								{
									"key": "userHandle",
									"value": "pshah_manager",
									"disabled": true
								},
								{
									"key": "projectId",
									"value": "111",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with m2m update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_work_period}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with missing parameter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.resourceBookingId\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with missing parameter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.endDate\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with missing parameter 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.paymentStatus\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.resourceBookingId\\\" must be a valid GUID\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"aaa-aaa\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.startDate\\\" must be in YYYY-MM-DD format\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"07-03-2021\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"startDate should be always Sunday\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-06\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"endDate should be always the next Saturday\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-14\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.daysWorked\\\" must be a number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": \"aa\",\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(`Key (resource_booking_id, start_date, end_date)=(${pm.environment.get('resourceBookingId')}, 2021-03-14, 2021-03-20) already exists.`)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period with invalid parameter 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.paymentStatus\\\" must be one of [pending, partially-completed, completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"paid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with m2m update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_work_period}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-21\",\r\n    \"endDate\": \"2021-03-27\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.resourceBookingId\\\" must be a valid GUID\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"aaa-aaa\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.startDate\\\" must be in YYYY-MM-DD format\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"07-03-2021\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"startDate should be always Sunday\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-06\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"endDate should be always the next Saturday\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-14\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.daysWorked\\\" must be a number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": \"aa\",\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(`Key (resource_booking_id, start_date, end_date)=(${pm.environment.get('resourceBookingId')}, 2021-03-14, 2021-03-20) already exists.`)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period with invalid parameter 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.paymentStatus\\\" must be one of [pending, partially-completed, completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"paid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete work period with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete work period with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete work period with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete work period with m2m delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_delete_work_period}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete work period with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete work period not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-periods/{{workPeriodId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-periods",
								"{{workPeriodId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Work Period Payments",
			"item": [
				{
					"name": "Before Test",
					"item": [
						{
							"name": "create job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"jobId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_bookingManager}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create resource booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"resourceBookingId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{project_id_17234}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{jobId}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-10-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"workPeriodId\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"workPeriodId2\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						},
						{
							"name": "create work period with m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"workPeriodIdCreatedByM2M\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_m2m_create_work_period}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceBookingId\": \"{{resourceBookingId}}\",\r\n    \"startDate\": \"2021-03-14\",\r\n    \"endDate\": \"2021-03-20\",\r\n    \"daysWorked\": 3,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"cancelled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/work-periods",
									"host": [
										"{{URL}}"
									],
									"path": [
										"work-periods"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create work period payment with boooking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"workPeriodPaymentId\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create multiple work period payments with boooking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600\r\n},{\r\n    \"workPeriodId\": \"{{workPeriodId2}}\",\r\n    \"amount\": 900\r\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create query work period payments with boooking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\": { \"workPeriods.paymentStatus\": \"pending\" } }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/query",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    if(pm.response.status === \"OK\"){\r",
									"        const response = pm.response.json()\r",
									"        pm.environment.set(\"workPeriodPaymentIdCreatedByM2M\", response.id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_create_work_period_payment}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodIdCreatedByM2M}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with missing workPeriodId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.workPeriodId\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid workPeriodId 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.workPeriodId\\\" must be a valid GUID\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"aaa-bb-c\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid workPeriodId 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.workPeriodId\\\" must be a string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": 123,\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid amount 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.amount\\\" must be a number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": \"abc\",\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid amount 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.amount\\\" must be greater than 0\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 0,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid status 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.status\\\" must be one of [completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1200,\r\n    \"status\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "create work period payment with invalid status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"workPeriodPayment.status\\\" must be one of [completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1200,\r\n    \"status\": \"invalid-status\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period payment with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period payment with m2m read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_work_period_payment}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period payment with booking manager from db",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}?fromDb=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							],
							"query": [
								{
									"key": "fromDb",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period payment with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get work period payment with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search work period payments with booking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "status",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "workPeriodId",
									"value": "{{workPeriodId}}",
									"disabled": true
								},
								{
									"key": "workPeriodIds",
									"value": "{{workPeriodId}},{{workPeriodIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work period payments with m2m all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_all_work_period_payment}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "status",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "workPeriodId",
									"value": "{{workPeriodId}}",
									"disabled": true
								},
								{
									"key": "workPeriodIds",
									"value": "{{workPeriodId}},{{workPeriodIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work period payments with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "status",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "workPeriodId",
									"value": "{{workPeriodId}}",
									"disabled": true
								},
								{
									"key": "workPeriodIds",
									"value": "{{workPeriodId}},{{workPeriodIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work period payments with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "status",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "workPeriodId",
									"value": "{{workPeriodId}}",
									"disabled": true
								},
								{
									"key": "workPeriodIds",
									"value": "{{workPeriodId}},{{workPeriodIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search work period payments with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"url": {
							"raw": "{{URL}}/work-period-payments",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "50",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "status",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "workPeriodId",
									"value": "{{workPeriodId}}",
									"disabled": true
								},
								{
									"key": "workPeriodIds",
									"value": "{{workPeriodId}},{{workPeriodIdCreatedByM2M}}",
									"disabled": true
								},
								{
									"key": "status",
									"value": "completed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with boooking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_work_period_payment}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodIdCreatedByM2M}}\",\r\n    \"amount\": 1600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with missing workPeriodId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.workPeriodId\\\" is required\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid workPeriodId 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.workPeriodId\\\" must be a valid GUID\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"aaa-bb-c\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid workPeriodId 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.workPeriodId\\\" must be a string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": 123,\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid amount 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.amount\\\" must be a number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": \"abc\",\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid amount 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.amount\\\" must be greater than 0\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 0,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid status 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.status\\\" must be one of [completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1200,\r\n    \"status\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put work period payment with invalid status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.status\\\" must be one of [completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1200,\r\n    \"status\": \"invalid-status\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with boooking manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with m2m create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_update_work_period_payment}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodIdCreatedByM2M}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentIdCreatedByM2M}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentIdCreatedByM2M}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with connect user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_connectUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with user id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Bad Request\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_userId_not_exist}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer invalid_token"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid workPeriodId 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.workPeriodId\\\" must be a valid GUID\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"aaa-bb-c\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid workPeriodId 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.workPeriodId\\\" must be a string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": 123,\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid amount 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.amount\\\" must be a number\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": \"abc\",\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid amount 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.amount\\\" must be greater than 0\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 0,\r\n    \"status\": \"completed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid status 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.status\\\" must be one of [completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1200,\r\n    \"status\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch work period payment with invalid status 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json()\r",
									"    pm.expect(response.message).to.eq(\"\\\"data.status\\\" must be one of [completed, cancelled]\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId}}\",\r\n    \"amount\": 1200,\r\n    \"status\": \"invalid-status\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"work-period-payments",
								"{{workPeriodPaymentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Taas Teams",
			"item": [
				{
					"name": "Before Start",
					"item": [
						{
							"name": "create role 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleIdForTeam-1\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\",\n        \"User Interface (Ui)\",\n        \"Photoshop\",\n        \"appcelerator\",\n        \"Flux\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 8,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleIdForTeam-2\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Angular Developer\",\n    \"description\": \"Angular is an open-source, client-side framework based on TypeScript and designed for building web applications.\",\n    \"listOfSkills\": [\n        \"Database\",\n        \"Winforms\",\n        \"User Interface (Ui)\",\n        \"Photoshop\",\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 55,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 8,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleIdForTeam-3\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Salesforce Developer\",\n    \"description\": \"A Salesforce developer is a programmer who builds Salesforce applications across various PaaS (Platform as a Service) platforms.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\",\n        \"appcelerator\",\n        \"Flux\",\n        \"Database\",\n        \"Winforms\",\n        \"NGINX\",\n        \"Machine Learning\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 40,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 6,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role Custom",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Custom\",\n    \"rates\": [\n        {\n            \"global\": 10,\n            \"inCountry\": 10,\n            \"offShore\": 10\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Role Search",
					"item": [
						{
							"name": "send request with administrator using roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId1-1\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\": \"{{roleIdForTeam-1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with administrator using skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId1-2\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": [\r\n        \"56f46882-26f3-4c39-966d-912cccea0119\",\r\n        \"536865d3-e7c7-4675-b119-6df8bf411624\",\r\n        \"bd417c10-d81a-45b6-85a9-d79efe86b9bb\",\r\n        \"4fce6ced-3610-443c-92eb-3f6d76b34f5c\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with administrator using description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId1-3\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jobDescription\": \"Should have these skills: Machine Learning, Dropwizard, NGINX, appcelerator\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with user using roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId2-1\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_member_test_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\": \"{{roleIdForTeam-2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with user using skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId2-2\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_member_test_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": [\r\n        \"56f46882-26f3-4c39-966d-912cccea0119\",\r\n        \"536865d3-e7c7-4675-b119-6df8bf411624\",\r\n        \"bd417c10-d81a-45b6-85a9-d79efe86b9bb\",\r\n        \"4fce6ced-3610-443c-92eb-3f6d76b34f5c\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with user using description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId2-3\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_member_test_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jobDescription\": \"Should have these skills: Machine Learning, Dropwizard, NGINX, appcelerator\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with m2m using roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId3-1\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_m2m_create_roleSearchRequests}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\": \"{{roleIdForTeam-3}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with m2m using skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId3-2\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_m2m_create_roleSearchRequests}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": [\r\n        \"56f46882-26f3-4c39-966d-912cccea0119\",\r\n        \"536865d3-e7c7-4675-b119-6df8bf411624\",\r\n        \"bd417c10-d81a-45b6-85a9-d79efe86b9bb\",\r\n        \"4fce6ced-3610-443c-92eb-3f6d76b34f5c\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with m2m using description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleSearchRequestId3-3\", response.roleSearchRequestId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_m2m_create_roleSearchRequests}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jobDescription\": \"Should have these skills: Machine Learning, Dropwizard, NGINX, appcelerator\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid_token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"jobDescription\": \"Should have these skills: Machine Learning, Dropwizard, NGINX, appcelerator\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data\\\" must have at least 1 key\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.roleId\\\" must be a valid GUID\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\": \"000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" doesn't exists.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"roleId\": \"00000000-0000-0000-0000-000000000000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.skills\\\" must be an array\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": \"00000000-0000-0000-0000-000000000000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid skills: [00000000-0000-0000-0000-000000000000]\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": [\r\n        \"00000000-0000-0000-0000-000000000000\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "send request with not matching skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.name).to.eq(\"Custom\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"skills\": [\r\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\r\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\r\n    \"cbac57a3-7180-4316-8769-73af64893158\",\r\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/sendRoleSearchRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"sendRoleSearchRequest"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Team",
					"item": [
						{
							"name": "create team with administrator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"createTeamProjectId-1\", response.projectId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-1}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        },\r\n        {\r\n            \"roleName\": \"Salesforce Developer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-2}}\",\r\n            \"numberOfResources\": 5,\r\n            \"durationWeeks\": 5,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created jobs 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs?projectId={{createTeamProjectId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "projectId",
											"value": "{{createTeamProjectId-1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"createTeamProjectId-2\", response.projectId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_member_test_2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 2\",\r\n    \"teamDescription\":\"Submit Team Test 2 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Angular Developer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId2-1}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        },\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId2-3}}\",\r\n            \"numberOfResources\": 5,\r\n            \"durationWeeks\": 5,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created jobs 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs?projectId={{createTeamProjectId-2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "projectId",
											"value": "{{createTeamProjectId-2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"createTeamProjectId-3\", response.projectId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_m2m_create_teams}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 3\",\r\n    \"teamDescription\":\"Submit Team Test 3 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Salesforce Developer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId3-2}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        },\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId3-3}}\",\r\n            \"numberOfResources\": 5,\r\n            \"durationWeeks\": 5,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get created jobs 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs?projectId={{createTeamProjectId-3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									],
									"query": [
										{
											"key": "projectId",
											"value": "{{createTeamProjectId-3}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-1}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        },\r\n        {\r\n            \"roleName\": \"Salesforce Developer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-2}}\",\r\n            \"numberOfResources\": 5,\r\n            \"durationWeeks\": 5,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.teamName\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-1}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        },\r\n        {\r\n            \"roleName\": \"Salesforce Developer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-2}}\",\r\n            \"numberOfResources\": 5,\r\n            \"durationWeeks\": 5,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.positions\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.positions[0].roleName\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-1}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.positions[0].roleSearchRequestId\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with missing field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.positions[0].numberOfResources\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-1}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"RoleSearchRequest\\\" doesn't exists.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\": [\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"00000000-0000-0000-0000-000000000000\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create team with invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.positions\\\" must be an array\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token_administrator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"teamName\": \"Submit Team Test 1\",\r\n    \"teamDescription\":\"Submit Team Test 1 description\",\r\n    \"positions\":\r\n        {\r\n            \"roleName\": \"Dev Ops Engineer\",\r\n            \"roleSearchRequestId\": \"{{roleSearchRequestId1-1}}\",\r\n            \"numberOfResources\": 10,\r\n            \"durationWeeks\": 7,\r\n            \"startMonth\": \"2021-06-15\"\r\n        }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/submitTeamRequest",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"submitTeamRequest"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Skills by Job Description",
					"item": [
						{
							"name": "get skills successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \"description\": \"Description  A global leading healthcare company is seeking a strong Databricks Engineer to join their development team as they build their new Databricks workspace. Development efforts will contribute to the migration of data from Hadoop to Databricks to prepare data for visualization. Candidate must be well-versed in Databricks components and best practices, be an excellent problem solver and be comfortable working in a fast-moving, rapidly changing, and dynamic environment via Agile, SCRUM, and DevOps.  PREFERRED QUALIFICATIONS:      2+ years of Azure Data Stack experience: Azure Data Services using ADF, ADLS, Databricks with PySpark, Azure DevOps & Azure Key Vault.     Strong knowledge of various data warehousing methodologies and data modeling concepts.     Hands-on experience using Azure, Azure data lake, Azure functions & Databricks      Minimum 2-3+ years of Python experience (PySpark)     Design & Develop Azure native solutions for Data Platform     Minimum 3+ years of experience using Big Data ecosystem (Cloudera/Hortonworks) using Oozie, Hive, Impala, and Spark     Expert in SQL and performance tuning\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/getSkillsByJobDescription",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"getSkillsByJobDescription"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skills by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid_token"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \"description\": \"Description  A global leading healthcare company is seeking a strong Databricks Engineer to join their development team as they build their new Databricks workspace. Development efforts will contribute to the migration of data from Hadoop to Databricks to prepare data for visualization. Candidate must be well-versed in Databricks components and best practices, be an excellent problem solver and be comfortable working in a fast-moving, rapidly changing, and dynamic environment via Agile, SCRUM, and DevOps.  PREFERRED QUALIFICATIONS:      2+ years of Azure Data Stack experience: Azure Data Services using ADF, ADLS, Databricks with PySpark, Azure DevOps & Azure Key Vault.     Strong knowledge of various data warehousing methodologies and data modeling concepts.     Hands-on experience using Azure, Azure data lake, Azure functions & Databricks      Minimum 2-3+ years of Python experience (PySpark)     Design & Develop Azure native solutions for Data Platform     Minimum 3+ years of experience using Big Data ecosystem (Cloudera/Hortonworks) using Oozie, Hive, Impala, and Spark     Expert in SQL and performance tuning\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/getSkillsByJobDescription",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"getSkillsByJobDescription"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skills by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.description\\\" is not allowed to be empty\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \"description\": \"\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/getSkillsByJobDescription",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"getSkillsByJobDescription"
									]
								}
							},
							"response": []
						},
						{
							"name": "get skills by missing field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.description\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-teams/getSkillsByJobDescription",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-teams",
										"getSkillsByJobDescription"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET /taas-teams",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams?perPage=10&page=1&name=*taas*&sortBy=lastActivityAt&sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams"
							],
							"query": [
								{
									"key": "perPage",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "name",
									"value": "*taas*",
									"description": "case-insensitive; support wildcard match"
								},
								{
									"key": "sortBy",
									"value": "lastActivityAt",
									"description": "allows: createdAt, updatedAt, lastActivityAt, id, status, name, type, best match"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "allows: asc, desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams?perPage=10&page=1&name=*taas*&sortBy=lastActivityAt&sortOrder=desc",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams"
							],
							"query": [
								{
									"key": "perPage",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "name",
									"value": "*taas*",
									"description": "case-insensitive; support wildcard match"
								},
								{
									"key": "sortBy",
									"value": "lastActivityAt",
									"description": "allows: createdAt, updatedAt, lastActivityAt, id, status, name, type, best match"
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"description": "allows: asc, desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams with m2m read",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_taas_team}}"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/{{projectId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/:projectId",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "16705"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id with m2m read",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_taas_team}}"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/{{projectId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id/jobs/:jobId",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/{{projectId}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{projectId}}",
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id/jobs/:jobId with booking manager",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_bookingManager}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/:projectId/jobs/:jobId",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								":projectId",
								"jobs",
								":jobId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "16705"
								},
								{
									"key": "jobId",
									"value": "948a25a6-086f-4a96-aad5-9ccd2d3e87b2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id/jobs/:jobId with m2m read",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_m2m_read_taas_team}}"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/{{projectId}}/jobs/{{jobId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"{{projectId}}",
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/skills",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_member}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/skills?perPage=10&page=1&orderBy=name",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"skills"
							],
							"query": [
								{
									"key": "perPage",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "orderBy",
									"value": "name",
									"description": "possible values are defined by /v5/skills"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /taas-teams/email - team-issue-report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token_member}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template\": \"team-issue-report\",\n   \"data\": {\n      \"projectName\": \"TaaS Project Name\",\n      \"projectId\": 12345,\n      \"reportText\": \"I have issue with ...\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /taas-teams/email - member-issue-report",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template\": \"member-issue-report\",\n   \"data\": {\n      \"projectName\": \"TaaS Project Name\",\n      \"projectId\": 12345,\n      \"userHandle\": \"pshah_manager\",\n      \"reportText\": \"I have issue with ...\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /taas-teams/email - extension-request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"template\": \"extension-request\",\n   \"data\": {\n      \"projectName\": \"TaaS Project Name\",\n      \"projectId\": 12345,\n      \"userHandle\": \"pshah_manager\",\n      \"reportText\": \"I would like to keep working with this member for 2 months...\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"email"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /taas-teams/:id/members",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_administrator}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"handles\": [\n        \"tester1234\",\n        \"non-existing\"\n    ],\n    \"emails\": [\n        \"non-existing@domain.com\",\n        \"email@domain.com\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/taas-teams/:id/members",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								":id",
								"members"
							],
							"variable": [
								{
									"key": "id",
									"value": "16705"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id/members",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/:id/members?role=customer&fields=id,userId,role,createdAt,updatedAt,createdBy,updatedBy,handle,photoURL,workingHourStart,workingHourEnd,timeZone,email",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								":id",
								"members"
							],
							"query": [
								{
									"key": "role",
									"value": "customer"
								},
								{
									"key": "fields",
									"value": "id,userId,role,createdAt,updatedAt,createdBy,updatedBy,handle,photoURL,workingHourStart,workingHourEnd,timeZone,email"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "16705"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/:id/invites",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/:id/invites?fields=createdAt,deletedAt,role,updatedBy,createdBy,id,projectId,userId,email,deletedBy,updatedAt,status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								":id",
								"invites"
							],
							"query": [
								{
									"key": "fields",
									"value": "createdAt,deletedAt,role,updatedBy,createdBy,id,projectId,userId,email,deletedBy,updatedAt,status"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "16705"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /taas-teams/:id/members/:projectMemberId",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_bookingManager}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/:id/members/:projectMemberId",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								":id",
								"members",
								":projectMemberId"
							],
							"variable": [
								{
									"key": "id",
									"value": "16705"
								},
								{
									"key": "projectMemberId",
									"value": "14327"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /taas-teams/me",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{token_member}}"
							}
						],
						"url": {
							"raw": "{{URL}}/taas-teams/me",
							"host": [
								"{{URL}}"
							],
							"path": [
								"taas-teams",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Create Role",
					"item": [
						{
							"name": "create role with admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleId-1\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 8,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with booking manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleId-2\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Angular Developer\",\n    \"description\": \"Angular is an open-source, client-side framework based on TypeScript and designed for building web applications.\",\n    \"listOfSkills\": [\n        \"Database\",\n        \"Winforms\",\n        \"User Interface (Ui)\",\n        \"Photoshop\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 8,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with m2m create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    if(pm.response.status === \"OK\"){\r",
											"        const response = pm.response.json()\r",
											"        pm.environment.set(\"roleId-3\", response.id);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_m2m_create_role}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Salesforce Developer\",\n    \"description\": \"A Salesforce developer is a programmer who builds Salesforce applications across various PaaS (Platform as a Service) platforms.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\",\n        \"appcelerator\",\n        \"Flux\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5,\n            \"rate30Global\": 20,\n            \"rate30InCountry\": 15,\n            \"rate30OffShore\": 35,\n            \"rate20Global\": 20,\n            \"rate20InCountry\": 15,\n            \"rate20OffShore\": 35\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"numberOfMembersAvailable\": 6,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with connect user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_connectUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_member}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid_token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with existent name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Role: \\\"Dev Ops Engineer\\\" is already exists.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with missing parameter 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.name\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with missing parameter 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with missing parameter 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates\\\" does not contain 1 required value(s)\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with missing parameter 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].global\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with missing parameter 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].inCountry\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with missing parameter 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].offShore\\\" is required\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.name\\\" length must be less than or equal to 50 characters long\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.listOfSkills[0]\\\" length must be less than or equal to 50 characters long\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard Dropwizard\",\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.listOfSkills\\\" must be an array\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\":\"Dropwizard\",\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates\\\" must be an array\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": {\n        \"global\": 50,\n        \"inCountry\": 20,\n        \"offShore\": 10\n    },\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].global\\\" must be a number\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": \"first\",\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.rates[0].inCountry\\\" must be a number\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": \"fifty\",\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.numberOfMembers\\\" must be a number\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": null,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.imageUrl\\\" must be a valid uri\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"role.timeToCandidate\\\" must be less than or equal to 32767\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 99999,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "create role with invalid parameter 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"skills: \\\"teamworking,communication,problem-solving\\\" are not valid\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer 2\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \"Communication\",\n        \"Problem-Solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 55,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Role",
					"item": [
						{
							"name": "get role with admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with booking manager fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-2}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-2}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with m2m read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_m2m_read_role}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with connect user fromDb",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_connectUser}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}?fromDb=true",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									],
									"query": [
										{
											"key": "fromDb",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_member}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid token"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"id\\\" must be a valid GUID\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get role with missing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" not found\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with booking manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles?skillsList=dropwizard,  nginx,, machine learning , FORce.com &keyword=ops e",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									],
									"query": [
										{
											"key": "skillsList",
											"value": "dropwizard,  nginx,, machine learning , FORce.com "
										},
										{
											"key": "keyword",
											"value": "ops e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with connect user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_connectUser}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles?skillsList=dataBase,        ,Photoshop&keyword=sale",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									],
									"query": [
										{
											"key": "skillsList",
											"value": "dataBase,        ,Photoshop"
										},
										{
											"key": "keyword",
											"value": "sale"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with m2m read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_m2m_read_role}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles?skillsList=DOCKER,.NET&keyword=dev",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									],
									"query": [
										{
											"key": "skillsList",
											"value": "DOCKER,.NET"
										},
										{
											"key": "keyword",
											"value": "dev"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_member}}"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles?keyword=dev",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									],
									"query": [
										{
											"key": "keyword",
											"value": "dev"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search roles with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid token"
									}
								],
								"url": {
									"raw": "{{URL}}/taas-roles",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Role",
					"item": [
						{
							"name": "update role with admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer edit\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with booking manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Angular Developer edit\",\n    \"description\": \"Angular is an open-source, client-side framework based on TypeScript and designed for building web applications.\",\n    \"listOfSkills\": [\n        \"Database\",\n        \"Winforms\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with m2m update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_m2m_update_role}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Salesforce Developer edit\",\n    \"description\": \"A Salesforce developer is a programmer who builds Salesforce applications across various PaaS (Platform as a Service) platforms.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_member}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with connect user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_connectUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid_token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"id\\\" must be a valid GUID\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with missing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" doesn't exists.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with existent name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Role: \\\"Angular Developer edit\\\" is already exists.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Angular Developer edit\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.name\\\" length must be less than or equal to 50 characters long\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.listOfSkills[0]\\\" length must be less than or equal to 50 characters long\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking Teamworking\",\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.listOfSkills\\\" must be an array\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\":\"Teamworking\",\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.rates\\\" must be an array\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": {\n        \"global\": 50,\n        \"inCountry\": 20,\n        \"offShore\": 10\n    },\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.rates[0].global\\\" must be a number\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": \"first\",\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.rates[0].inCountry\\\" must be a number\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": \"fifty\",\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.numberOfMembers\\\" must be a number\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": \"hundred\",\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.imageUrl\\\" must be a valid uri\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"data.timeToCandidate\\\" must be less than or equal to 32767\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Docker\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 99999,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update role with invalid parameter 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"skills: \\\"teamworking\\\" are not valid\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \".NET\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        }\n    ],\n    \"numberOfMembers\": 55,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 66,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Role",
					"item": [
						{
							"name": "delete role with connect user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_connectUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 403', function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_member}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"Invalid Token.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer invalid_token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"teamworking\",\n        \"communication\",\n        \"problem-solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400', function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"\\\"id\\\" must be a valid GUID\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/invalid",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with missing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 404', function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json()\r",
											"    pm.expect(response.message).to.eq(\"id: 00000000-0000-0000-0000-000000000000 \\\"Role\\\" doesn't exists.\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_administrator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with booking manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete role with m2m delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204', function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_m2m_delete_role}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/taas-roles/{{roleId-3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"taas-roles",
										"{{roleId-3}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "health check",
			"item": [
				{
					"name": "health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Demo Data For Team",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "Get Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var demoUsers = 20;",
											"",
											"pm.test('We need to have at least ' + demoUsers + ' demo userIds. Define them in {{demoUserIdN}} variables.', function () {",
											"    for (var i = 0; i < demoUsers; i++) {",
											"        var variableName = \"demoUserId\" + (i + 1);",
											"        var existentValue = pm.variables.get(variableName);",
											"        var user = data[i];",
											"",
											"        pm.expect(!!user || !!existentValue).to.be.true;",
											"",
											"        postman.setEnvironmentVariable(variableName, user.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_bookingManager}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.topcoder-dev.com/v5/users?perPage=20",
									"protocol": "https",
									"host": [
										"api",
										"topcoder-dev",
										"com"
									],
									"path": [
										"v5",
										"users"
									],
									"query": [
										{
											"key": "perPage",
											"value": "20"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create job #1 \"sourcing\"",
					"item": [
						{
							"name": "create job #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJobId1\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"0\",\n  \"description\": \"taas-demo-job1\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"weekly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"ee4c50c1-c8c3-475e-b6b6-edbd136a19d6\",\n    \"89139c80-d0a2-47c2-aa16-14589d5afd10\",\n    \"9f2d9127-6a2e-4506-ad76-c4ab63577b09\",\n    \"9515e7ee-83b6-49d1-ba5c-6c59c5a8ef1b\",\n    \"c854ab55-5922-4be1-8ecc-b3bc1f8629af\",\n    \"8456002e-fa2d-44f0-b0e7-86b1c02b6e4c\",\n    \"114b4ec8-805e-4c60-b351-14a955a991a9\",\n    \"213408aa-f16f-46c8-bc57-9e569cee3f11\",\n    \"b37a48db-f775-4e4e-b403-8ad1d234cdea\",\n    \"99b930b5-1b91-4df1-8b17-d9307107bb51\",\n    \"6388a632-c3ad-4525-9a73-66a527c03672\",\n    \"23839f38-6f19-4de9-9d28-f020056bca73\",\n    \"289e42a3-23e9-49be-88e1-6deb93cd8c31\",\n    \"b403f209-63b5-42bc-9b5f-1564416640d8\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create job #2 \"in-review\"",
					"item": [
						{
							"name": "create job #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJobId2\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"0\",\n  \"description\": \"taas-demo-job2\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 7,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"weekly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"213408aa-f16f-46c8-bc57-9e569cee3f11\",\n    \"b37a48db-f775-4e4e-b403-8ad1d234cdea\",\n    \"99b930b5-1b91-4df1-8b17-d9307107bb51\",\n    \"6388a632-c3ad-4525-9a73-66a527c03672\",\n    \"23839f38-6f19-4de9-9d28-f020056bca73\",\n    \"289e42a3-23e9-49be-88e1-6deb93cd8c31\",\n    \"b403f209-63b5-42bc-9b5f-1564416640d8\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob1candidateId1\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob1candidateId2\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId2}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId3}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId4}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId5}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId6}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId7}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId8}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId9}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #2 candidate 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId2}}\",\r\n  \"userId\": \"{{demoUserId10}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job #2 candidate 1 to \"shortlist\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"shortlist\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{demoJob1candidateId1}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{demoJob1candidateId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job #2 candidate 2 to \"rejected\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"rejected\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates/{{demoJob1candidateId2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates",
										"{{demoJob1candidateId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job #2 status to \"in-review\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"in-review\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{demoJobId2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{demoJobId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create job #3 \"assigned\"",
					"item": [
						{
							"name": "create job #3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJobId3\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"0\",\n  \"description\": \"taas-demo-job3\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 7,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"weekly\",\n  \"workload\": \"full-time\",\n  \"skills\": [],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId11}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId12}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 13",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId13}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 14",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId14}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId15}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId16}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 17",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId17}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 18",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId18}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 19",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId19}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job #3 candidate 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"userId\": \"{{demoUserId20}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobCandidates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobCandidates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId11\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId11}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 1000,\r\n  \"customerRate\": 1200,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId12\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId12}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 1000,\r\n  \"customerRate\": 1200,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 13",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId13\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId13}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 1000,\r\n  \"customerRate\": 1200,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 14",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId14\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId14}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 1000,\r\n  \"customerRate\": 1200,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId15\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId15}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 1000,\r\n  \"customerRate\": 1200,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId16\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId16}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 800,\r\n  \"customerRate\": 1000,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 17",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId17\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId17}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"{{resourceStartDate}}\",\r\n  \"endDate\": \"{{resourceEndDate}}\",\r\n  \"memberRate\": 2000,\r\n  \"customerRate\": 2500,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 18",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId18\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId18}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"2000-07-27T04:17:23.131Z\",\r\n  \"endDate\": \"2000-09-27T04:17:23.131Z\",\r\n  \"memberRate\": 3000,\r\n  \"customerRate\": 3500,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 19",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId19\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId19}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"2022-07-27T04:17:23.131Z\",\r\n  \"endDate\": \"2022-09-27T04:17:23.131Z\",\r\n  \"memberRate\": 1700,\r\n  \"customerRate\": 1900,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create job 3 resource booking 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJob3resourceCandiateId20\",data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const startDate = new Date()",
											"startDate.setDate(startDate.getDate() - 3);",
											"",
											"const endDate = new Date()",
											"endDate.setDate(endDate.getDate() + 3);",
											"",
											"postman.setEnvironmentVariable(\"resourceStartDate\", startDate.toUTCString());",
											"postman.setEnvironmentVariable(\"resourceEndDate\", endDate.toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"{{demoUserId20}}\",\r\n  \"jobId\": \"{{demoJobId3}}\",\r\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\r\n  \"endDate\": \"2020-09-27T04:17:23.131Z\",\r\n  \"memberRate\": 0,\r\n  \"customerRate\": 0,\r\n  \"rateType\": \"weekly\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 11 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId11}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId11}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 12 status to \"in-review\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"in-review\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId12}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId12}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 13 status to \"closed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"closed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId13}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId13}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 14 status to \"cancelled\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"cancelled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId14}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId14}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 15 status to \"sourcing\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"sourcing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId15}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId15}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 16 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId16}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId16}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 17 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId17}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId17}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 18 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId18}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId18}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 19 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId19}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId19}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job 3 resource booking 20 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/resourceBookings/{{demoJob3resourceCandiateId20}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"resourceBookings",
										"{{demoJob3resourceCandiateId20}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job #3 status to \"assigned\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"assigned\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{demoJobId3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{demoJobId3}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create job #4 \"closed\"",
					"item": [
						{
							"name": "create job #4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJobId4\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"0\",\n  \"description\": \"taas-demo-job4\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 7,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"weekly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"8456002e-fa2d-44f0-b0e7-86b1c02b6e4c\",\n    \"114b4ec8-805e-4c60-b351-14a955a991a9\",\n    \"213408aa-f16f-46c8-bc57-9e569cee3f11\",\n    \"b37a48db-f775-4e4e-b403-8ad1d234cdea\",\n    \"99b930b5-1b91-4df1-8b17-d9307107bb51\",\n    \"6388a632-c3ad-4525-9a73-66a527c03672\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job #4 status to \"closed\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"closed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{demoJobId4}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{demoJobId4}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create job #5 \"cancelled\"",
					"item": [
						{
							"name": "create job #5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"postman.setEnvironmentVariable(\"demoJobId5\",data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"0\",\n  \"description\": \"taas-demo-job5\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 7,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"weekly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"b37a48db-f775-4e4e-b403-8ad1d234cdea\",\n    \"99b930b5-1b91-4df1-8b17-d9307107bb51\",\n    \"6388a632-c3ad-4525-9a73-66a527c03672\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs"
									]
								}
							},
							"response": []
						},
						{
							"name": "update job #5 status to \"cancelled\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful PATCH request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{token_bookingManager}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"cancelled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URL}}/jobs/{{demoJobId5}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"jobs",
										"{{demoJobId5}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Test Permission Rules",
			"item": [
				{
					"name": "Request with Administrator Role",
					"item": [
						{
							"name": "Jobs",
							"item": [
								{
									"name": "✔ create job with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"job_id_created_by_administrator\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get job with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search jobs with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "3",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "21",
													"disabled": true
												},
												{
													"key": "externalId",
													"value": "1212",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Dummy",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2020-09-27T04:17:23.131Z",
													"disabled": true
												},
												{
													"key": "resourceType",
													"value": "Dummy Resource Type",
													"disabled": true
												},
												{
													"key": "skill",
													"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
													"disabled": true
												},
												{
													"key": "rateType",
													"value": "hourly",
													"disabled": true
												},
												{
													"key": "status",
													"value": "sourcing",
													"disabled": true
												},
												{
													"key": "workload",
													"value": "full-time",
													"disabled": true
												},
												{
													"key": "title",
													"value": "dummy",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put job with administrator",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch job with administrator",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ delete job with administrator",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Job Candidates",
							"item": [
								{
									"name": "✔ create job candidate with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"job_candidate_id_created_by_administrator\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get job candidate with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search job candidates with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "jobId",
													"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a",
													"disabled": true
												},
												{
													"key": "status",
													"value": "selected",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put job candidate with administrator",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"status\": \"placed\",\r\n  \"remark\": \"excellent\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch job candidate with administrator",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"selected\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ delete job candidate with administrator",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Interviews",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_id_created_by_administrator\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"88774632\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create job candidate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_candidate_id_created_by_administrator\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✔ request interview with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    if(pm.response.status === \"OK\"){\r",
													"        const response = pm.response.json()\r",
													"        pm.environment.set(\"interview_round_created_by_administrator\", response.round);\r",
													"        pm.environment.set(\"interview_id_created_by_administrator\", response.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"status\": \"Scheduling\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}/requestInterview",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}",
												"requestInterview"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get interview by round with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}/interviews/{{interview_round_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}",
												"interviews",
												"{{interview_round_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get interview by id with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/getInterview/{{interview_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"getInterview",
												"{{interview_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ update interview by round with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"calendarEventId\": \"updated\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}/updateInterview/{{interview_round_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}",
												"updateInterview",
												"{{interview_round_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ update interview by id with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\",\r\n    \"calendarEventId\": \"updated\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/updateInterview/{{interview_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"updateInterview",
												"{{interview_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search interviews with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_administrator}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_by_administrator}}/interviews",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_by_administrator}}",
												"interviews"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resource Bookings",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "✔ create job with administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_by_administrator\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✔ create resource booking with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"resource_bookings_id_created_by_administrator\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get resource booking with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_bookings_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_bookings_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search resource bookings with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/resourceBookings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2020-09-27",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2020-09-27",
													"disabled": true
												},
												{
													"key": "rateType",
													"value": "hourly",
													"disabled": true
												},
												{
													"key": "status",
													"value": "sourcing",
													"disabled": true
												},
												{
													"key": "projectIds",
													"value": "111, 16705",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put resource booking with administrator",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_bookings_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_bookings_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch resource booking with administrator",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_bookings_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_bookings_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ delete resource booking with administrator",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_bookings_id_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_bookings_id_created_by_administrator}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Work Periods",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "✔ create job with administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_by_administrator\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create resource booking with administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"resource_bookings_id_created_by_administrator\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✔ create work period with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    if(pm.response.status === \"OK\"){\r",
													"        const response = pm.response.json()\r",
													"        pm.environment.set(\"workPeriodId_created_by_administrator\", response.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_bookings_id_created_by_administrator}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get work period with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search work periods with administrator",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-periods",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "resourceBookingId",
													"value": "{{resource_bookings_id_created_by_administrator}}",
													"disabled": true
												},
												{
													"key": "resourceBookingIds",
													"value": "{{resource_bookings_id_created_by_administrator}},{{resource_bookings_id_created_by_administrator}}",
													"disabled": true
												},
												{
													"key": "paymentStatus",
													"value": "pending",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2021-03-07",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2021-03-13",
													"disabled": true
												},
												{
													"key": "userHandle",
													"value": "pshah_manager",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "111",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put work period with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_bookings_id_created_by_administrator}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch work period with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_bookings_id_created_by_administrator}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ delete work period with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 204', function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_by_administrator}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Work Period Payments",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "✔ create job with administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_by_administrator\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_17234}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create resource booking with administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"resource_bookings_id_created_by_administrator\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_17234}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create work period with administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodId_created_by_administrator\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"resourceBookingId\": \"{{resource_bookings_id_created_by_administrator}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-periods",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-periods"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✔ create work period payment with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    if(pm.response.status === \"OK\"){\r",
													"        const response = pm.response.json()\r",
													"        pm.environment.set(\"workPeriodPaymentId_created_by_administrator\", response.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_by_administrator}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ create multiple work period payment with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"query\": { \"workPeriods.paymentStatus\": \"pending\" } }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/query",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"query"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get work period payment with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search work period payments with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-period-payments",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "status",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "workPeriodId",
													"value": "{{workPeriodId_created_by_administrator}}",
													"disabled": true
												},
												{
													"key": "workPeriodIds",
													"value": "{{workPeriodId_created_by_administrator}},{{workPeriodId_created_by_administrator}}",
													"disabled": true
												},
												{
													"key": "status",
													"value": "completed",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put work period payment with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_by_administrator}}\",\r\n    \"amount\": 1600,\r\n    \"status\": \"completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_by_administrator}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch work period payment with administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_by_administrator}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_by_administrator}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_by_administrator}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "✔ create role with admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    if(pm.response.status === \"OK\"){\r",
													"        const response = pm.response.json()\r",
													"        pm.environment.set(\"roleId-1\", response.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get role with admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search roles with admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"url": {
											"raw": "{{URL}}/taas-roles",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ update role with admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Dev Ops Engineer edit\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ delete role with admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 204', function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_administrator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Request with Topcoder User Role",
					"item": [
						{
							"name": "README",
							"item": [
								{
									"name": "[STUB] all operations cause 403 error if user is not member of project",
									"request": {
										"method": "LOCK",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Jobs",
							"item": [
								{
									"name": "✔ create job with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"job_id_created_by_member\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member_tester1234}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"projectId\": {{project_id_16718}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get job with member",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search jobs with member filtering by \"projectId\"",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobs?projectId={{project_id_16718}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "3",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "{{project_id_16718}}"
												},
												{
													"key": "externalId",
													"value": "1212",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Dummy",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2020-09-27T04:17:23.131Z",
													"disabled": true
												},
												{
													"key": "resourceType",
													"value": "Dummy Resource Type",
													"disabled": true
												},
												{
													"key": "skill",
													"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
													"disabled": true
												},
												{
													"key": "rateType",
													"value": "hourly",
													"disabled": true
												},
												{
													"key": "status",
													"value": "sourcing",
													"disabled": true
												},
												{
													"key": "workload",
													"value": "full-time",
													"disabled": true
												},
												{
													"key": "title",
													"value": "dummy",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put job with member",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"projectId\": {{project_id_16718}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch job with member",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete job with member",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_member}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Job Candidates",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job candidate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_candidate_id_created_for_member\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create job candidate with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"job_candidate_id_created_by_member\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get job candidate with member",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search job candidates with member filtering  by \"jobId\"",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates?jobId={{job_id_created_by_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "jobId",
													"value": "{{job_id_created_by_member}}"
												},
												{
													"key": "userId",
													"value": "fe38eed1-af73-41fd-85a2-ac4da1ff09a3",
													"disabled": true
												},
												{
													"key": "status",
													"value": "selected",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put job candidate with member",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"status\": \"placed\",\r\n  \"remark\": \"excellent\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch job candidate with member",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"selected\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete job candidate with member",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Interviews",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_id_created_for_member\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"88774632\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create job candidate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_candidate_id_created_for_member\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates"
													]
												}
											},
											"response": []
										},
										{
											"name": "create interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    const response = pm.response.json()\r",
															"    pm.environment.set(\"interview_round_created_for_member\", response.round)\r",
															"    pm.environment.set(\"interview_id_created_for_member\", response.id)\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"status\": \"Scheduling\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}/requestInterview",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates",
														"{{job_candidate_id_created_for_member}}",
														"requestInterview"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ request interview with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"status\": \"Scheduling\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}/requestInterview",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}",
												"requestInterview"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ get interview by round with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}/interviews/{{interview_round_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}",
												"interviews",
												"{{interview_round_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ get interview by id with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/getInterview/{{interview_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"getInterview",
												"{{interview_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ update interview by round with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}/updateInterview/{{interview_round_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}",
												"updateInterview",
												"{{interview_round_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ update interview by id with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/updateInterview/{{interview_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"updateInterview",
												"{{interview_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ search interviews with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 8547899 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_member}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_member}}/interviews",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_member}}",
												"interviews"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resource Bookings",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_id_created_by_member\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_member_tester1234}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_16718}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create resource booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"resource_booking_id_created_for_member\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_16718}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create resource booking with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"resource_booking_id_created_by_member\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{project_id_16718}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get resource booking with member",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search resource bookings with member filtering  by \"projectId\"",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/resourceBookings?projectId={{project_id_16718}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2020-09-27",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2020-09-27",
													"disabled": true
												},
												{
													"key": "rateType",
													"value": "hourly",
													"disabled": true
												},
												{
													"key": "status",
													"value": "sourcing",
													"disabled": true
												},
												{
													"key": "projectIds",
													"value": "111, 16705",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "{{project_id_16718}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ put resource booking with member",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{project_id_16718}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ patch resource booking with member",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete resource booking with member",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_member}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Work Periods",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_by_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_member_tester1234}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_16718}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create resource booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"resource_booking_id_created_for_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_16718}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_member}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										},
										{
											"name": "create work period",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodId_created_for_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_member}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-periods",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-periods"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create work period with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_member}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get work period with member",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_member}}?projectId=16718",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_member}}"
											],
											"query": [
												{
													"key": "projectId",
													"value": "16718"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search work periods with member",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-periods?projectId=16718",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "resourceBookingId",
													"value": "{{resource_booking_id_created_for_member}}",
													"disabled": true
												},
												{
													"key": "resourceBookingIds",
													"value": "{{resource_booking_id_created_for_member}},{{resource_booking_id_created_for_member}}",
													"disabled": true
												},
												{
													"key": "paymentStatus",
													"value": "pending",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2021-03-07",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2021-03-13",
													"disabled": true
												},
												{
													"key": "userHandle",
													"value": "pshah_manager",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "16718"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ put work period with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_member}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ patch work period with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_member}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete work period with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_member}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Work Period Payments",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "✔ create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_for_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_17234}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create resource booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"resource_bookings_id_created_for_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_17234}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{job_id_created_for_member}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create work period",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodId_created_for_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"resourceBookingId\": \"{{resource_bookings_id_created_for_member}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-periods",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-periods"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create work period payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodPaymentId_created_for_member\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_member}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-period-payments",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-period-payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create work period payment with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_member}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ create query work period payment with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"query\": { \"workPeriods.paymentStatus\": \"pending\" } }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/query",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"query"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ get work period payment with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ search work period payments with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-period-payments",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "status",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "workPeriodId",
													"value": "{{workPeriodPaymentId_created_for_member}}",
													"disabled": true
												},
												{
													"key": "workPeriodIds",
													"value": "{{workPeriodPaymentId_created_for_member}},{{workPeriodPaymentId_created_for_member}}",
													"disabled": true
												},
												{
													"key": "status",
													"value": "completed",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ put work period payment with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_member}}\",\r\n    \"amount\": 1600,\r\n    \"status\": \"completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_for_member}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ patch work period payment with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member_tester1234}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_member}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_member}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_for_member}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "Before Start",
									"item": [
										{
											"name": "✔ create role with admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"roleId-1\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/taas-roles",
													"host": [
														"{{URL}}"
													],
													"path": [
														"taas-roles"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create role with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get role with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member}}"
											}
										],
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search roles with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member}}"
											}
										],
										"url": {
											"raw": "{{URL}}/taas-roles?keyword=Dev",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles"
											],
											"query": [
												{
													"key": "keyword",
													"value": "Dev"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ update role with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \"Communication\",\n        \"Problem-Solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete role with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_member}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Request with Connect Manager Role",
					"item": [
						{
							"name": "README",
							"item": [
								{
									"name": "[STUB] all operations except get/search cause 403 error if manager is not member of project",
									"request": {
										"method": "LOCK",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Jobs",
							"item": [
								{
									"name": "✔ create job with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"job_id_created_by_connect_manager\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"projectId\": {{project_id_16843}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get job with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search jobs with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobs",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "3",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "21",
													"disabled": true
												},
												{
													"key": "externalId",
													"value": "1212",
													"disabled": true
												},
												{
													"key": "description",
													"value": "Dummy",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2020-09-27T04:17:23.131Z",
													"disabled": true
												},
												{
													"key": "resourceType",
													"value": "Dummy Resource Type",
													"disabled": true
												},
												{
													"key": "skill",
													"value": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
													"disabled": true
												},
												{
													"key": "rateType",
													"value": "hourly",
													"disabled": true
												},
												{
													"key": "status",
													"value": "sourcing",
													"disabled": true
												},
												{
													"key": "workload",
													"value": "full-time",
													"disabled": true
												},
												{
													"key": "title",
													"value": "dummy",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put job with connect manager",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"projectId\": {{project_id_16843}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch job with connect manager",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"fractional\",\n  \"skills\": [\n    \"cbac57a3-7180-4316-8769-73af64893158\"\n  ],\n  \"status\": \"sourcing\",\n  \"title\": \"Dummy title - at most 64 characters\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete job with connect manager",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobs/{{job_id_created_by_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobs",
												"{{job_id_created_by_connect_manager}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Job Candidates",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job candidate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_candidate_id_created_for_connect_manager\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create job candidate with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"job_candidate_id_created_by_connect_manager\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get job candidate with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search job candidates with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "1",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "asc",
													"disabled": true
												},
												{
													"key": "jobId",
													"value": "46225f4c-c2a3-4603-a141-0277e96fabfa",
													"disabled": true
												},
												{
													"key": "userId",
													"value": "fe38eed1-af73-41fd-85a2-ac4da1ff09a3",
													"disabled": true
												},
												{
													"key": "status",
													"value": "selected",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ put job candidate with connect manager",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"status\": \"placed\",\r\n  \"remark\": \"excellent\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ patch job candidate with connect manager",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"selected\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete job candidate with connect manager",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Interviews",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_id_created_for_connect_manager\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{projectId}},\n  \"externalId\": \"88774632\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create job candidate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_candidate_id_created_for_connect_manager\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"jobId\": \"{{job_id_created_by_administrator}}\",\r\n  \"userId\": \"95e7970f-12b4-43b7-ab35-38c34bf033c7\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates"
													]
												}
											},
											"response": []
										},
										{
											"name": "create interview",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    const response = pm.response.json()\r",
															"    pm.environment.set(\"interview_round_created_for_connect_manager\", response.round);\r",
															"    pm.environment.set(\"interview_id_created_for_connect_manager\", response.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"status\": \"Scheduling\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}/requestInterview",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobCandidates",
														"{{job_candidate_id_created_for_connect_manager}}",
														"requestInterview"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ request interview with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 88774489 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"templateUrl\": \"interview-30\",\r\n    \"calendarEventId\": \"dummyId\",\r\n    \"hostEmail\": \"testcustomer@yopmail.com\",\r\n    \"status\": \"Scheduling\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}/requestInterview",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}",
												"requestInterview"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ get interview by round with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 88774489 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}/interviews/{{interview_round_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}",
												"interviews",
												"{{interview_round_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ get interview by id with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 88774489 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/getInterview/{{interview_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"getInterview",
												"{{interview_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ update interview by round with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 88774489 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}/updateInterview/{{interview_round_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}",
												"updateInterview",
												"{{interview_round_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ update interview by id with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 88774489 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"xaiId\": \"0edc1751-f4ca-4e8e-908a-95f6560311ab\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/updateInterview/{{interview_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"updateInterview",
												"{{interview_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ search interviews with member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 401', function () {\r",
													"    pm.response.to.have.status(401);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"userId: 88774489 the user is not a member of project 111\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{URL}}/jobCandidates/{{job_candidate_id_created_for_connect_manager}}/interviews",
											"host": [
												"{{URL}}"
											],
											"path": [
												"jobCandidates",
												"{{job_candidate_id_created_for_connect_manager}}",
												"interviews"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resource Bookings",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"job_id_created_by_connect_manager\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_connect_manager_pshahcopmanag2}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_16843}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create resource booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"resource_booking_id_created_for_connect_manager\",data.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_16843}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create resource booking with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"resource_booking_id_created_by_connect_manager\",data.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{project_id_16843}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get resource booking with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search resource bookings with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/resourceBookings",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2020-09-27",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2020-09-27",
													"disabled": true
												},
												{
													"key": "rateType",
													"value": "hourly",
													"disabled": true
												},
												{
													"key": "status",
													"value": "sourcing",
													"disabled": true
												},
												{
													"key": "projectIds",
													"value": "111, 16705",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ put resource booking with connect manager",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{project_id_16843}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"status\": \"placed\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ patch resource booking with connect manager",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"placed\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete resource booking with connect manager",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/resourceBookings/{{resource_booking_id_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"resourceBookings",
												"{{resource_booking_id_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Work Periods",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_by_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_16843}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "create resource booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"resource_booking_id_created_for_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_16843}},\r\n  \"userId\": \"fe38eed1-af73-41fd-85a2-ac4da1ff09a3\",\r\n  \"jobId\": \"{{job_id_created_by_connect_manager}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										},
										{
											"name": "create work period",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodId_created_for_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_connect_manager}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-periods",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-periods"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create work period with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_connect_manager}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get work period with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search work periods with connect manager",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-periods?projectId=16843",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "id",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "resourceBookingId",
													"value": "{{resource_booking_id_created_for_connect_manager}}",
													"disabled": true
												},
												{
													"key": "resourceBookingIds",
													"value": "{{resource_booking_id_created_for_connect_manager}},{{resource_booking_id_created_for_connect_manager}}",
													"disabled": true
												},
												{
													"key": "paymentStatus",
													"value": "pending",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "2021-03-07",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2021-03-13",
													"disabled": true
												},
												{
													"key": "userHandle",
													"value": "pshah_manager",
													"disabled": true
												},
												{
													"key": "projectId",
													"value": "16843"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ put work period with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_connect_manager}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ patch work period with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"resourceBookingId\": \"{{resource_booking_id_created_for_connect_manager}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete work period with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-periods/{{workPeriodId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-periods",
												"{{workPeriodId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Work Period Payments",
							"item": [
								{
									"name": "Before Test",
									"item": [
										{
											"name": "✔ create job",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"job_id_created_for_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token_administrator}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"projectId\": {{project_id_17234}},\n  \"externalId\": \"1212\",\n  \"description\": \"Dummy Description\",\n  \"startDate\": \"2020-09-27T04:17:23.131Z\",\n  \"duration\": 1,\n  \"numPositions\": 13,\n  \"resourceType\": \"Dummy Resource Type\",\n  \"rateType\": \"hourly\",\n  \"workload\": \"full-time\",\n  \"skills\": [\n    \"23e00d92-207a-4b5b-b3c9-4c5662644941\",\n    \"7d076384-ccf6-4e43-a45d-1b24b1e624aa\",\n    \"cbac57a3-7180-4316-8769-73af64893158\",\n    \"a2b4bc11-c641-4a19-9eb7-33980378f82e\"\n  ],\n  \"title\": \"Dummy title - at most 64 characters\",\n  \"minSalary\": 100,\n  \"maxSalary\": 200,\n  \"hoursPerWeek\": 20,\n  \"jobLocation\": \"Any location\",\n  \"jobTimezone\": \"GMT\",\n  \"currency\": \"USD\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/jobs",
													"host": [
														"{{URL}}"
													],
													"path": [
														"jobs"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create resource booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"resource_bookings_id_created_for_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"projectId\": {{project_id_17234}},\r\n  \"userId\": \"a55fe1bc-1754-45fa-9adc-cf3d6d7c377a\",\r\n  \"jobId\": \"{{job_id_created_for_connect_manager}}\",\r\n  \"startDate\": \"2020-09-27\",\r\n  \"endDate\": \"2020-09-27\",\r\n  \"memberRate\": 13.23,\r\n  \"customerRate\": 13,\r\n  \"rateType\": \"hourly\",\r\n  \"billingAccountId\": 80000071\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/resourceBookings",
													"host": [
														"{{URL}}"
													],
													"path": [
														"resourceBookings"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create work period",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodId_created_for_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"resourceBookingId\": \"{{resource_bookings_id_created_for_connect_manager}}\",\r\n    \"startDate\": \"2021-03-07\",\r\n    \"endDate\": \"2021-03-13\",\r\n    \"daysWorked\": 2,\r\n    \"memberRate\": 13.13,\r\n    \"customerRate\": 13.13,\r\n    \"paymentStatus\": \"pending\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-periods",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-periods"
													]
												}
											},
											"response": []
										},
										{
											"name": "✔ create work period payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"workPeriodPaymentId_created_for_connect_manager\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_connect_manager}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/work-period-payments",
													"host": [
														"{{URL}}"
													],
													"path": [
														"work-period-payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create work period payment with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_connect_manager}}\",\r\n    \"amount\": 600,\r\n    \"status\": \"completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ create query work period payment with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"query\": { \"workPeriods.paymentStatus\": \"pending\" } }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/query",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"query"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ get work period payment with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ search work period payments with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"url": {
											"raw": "{{URL}}/work-period-payments",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "perPage",
													"value": "5",
													"disabled": true
												},
												{
													"key": "sortBy",
													"value": "status",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "desc",
													"disabled": true
												},
												{
													"key": "workPeriodId",
													"value": "{{workPeriodPaymentId_created_for_connect_manager}}",
													"disabled": true
												},
												{
													"key": "workPeriodIds",
													"value": "{{workPeriodPaymentId_created_for_connect_manager}},{{workPeriodPaymentId_created_for_connect_manager}}",
													"disabled": true
												},
												{
													"key": "status",
													"value": "completed",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ put work period payment with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_connect_manager}}\",\r\n    \"amount\": 1600,\r\n    \"status\": \"completed\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ patch work period payment with connect manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connect_manager_pshahcopmanag2}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"workPeriodId\": \"{{workPeriodId_created_for_connect_manager}}\",\r\n    \"amount\": 450,\r\n    \"status\": \"cancelled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/work-period-payments/{{workPeriodPaymentId_created_for_connect_manager}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"work-period-payments",
												"{{workPeriodPaymentId_created_for_connect_manager}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "Before Start",
									"item": [
										{
											"name": "✔ create role with admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Status code is 200', function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    if(pm.response.status === \"OK\"){\r",
															"        const response = pm.response.json()\r",
															"        pm.environment.set(\"roleId-1\", response.id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{token_administrator}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Dev Ops Engineer 2\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{URL}}/taas-roles",
													"host": [
														"{{URL}}"
													],
													"path": [
														"taas-roles"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "✘ create role with connect user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connectUser}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Dropwizard\",\n        \"NGINX\",\n        \"Machine Learning\",\n        \"Force.com\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ get role with connect user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connectUser}}"
											}
										],
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✔ search roles with connect user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connectUser}}"
											}
										],
										"url": {
											"raw": "{{URL}}/taas-roles?skillsList=Dropwizard,        ,NGINX&keyword=Dev",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles"
											],
											"query": [
												{
													"key": "skillsList",
													"value": "Dropwizard,        ,NGINX"
												},
												{
													"key": "keyword",
													"value": "Dev"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ update role with connect user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connectUser}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Dev Ops Engineer\",\n    \"description\": \"A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates.\",\n    \"listOfSkills\": [\n        \"Teamworking\",\n        \"Communication\",\n        \"Problem-Solving\"\n    ],\n    \"rates\": [\n        {\n            \"global\": 50,\n            \"inCountry\": 20,\n            \"offShore\": 10\n        },\n        {\n            \"global\": 25,\n            \"inCountry\": 15,\n            \"offShore\": 5\n        }\n    ],\n    \"numberOfMembers\": 10,\n    \"imageUrl\": \"http://images.topcoder.com/member\",\n    \"timeToCandidate\": 105,\n    \"timeToInterview\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "✘ delete role with connect user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 403', function () {\r",
													"    pm.response.to.have.status(403);\r",
													"    const response = pm.response.json()\r",
													"    pm.expect(response.message).to.eq(\"You are not allowed to perform this action!\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{token_connectUser}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{URL}}/taas-roles/{{roleId-1}}",
											"host": [
												"{{URL}}"
											],
											"path": [
												"taas-roles",
												"{{roleId-1}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}
