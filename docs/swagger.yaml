openapi: 3.0.0
info:
  title: Bookings microservice
  description: Bookings microservice
  version: 1.0.0
servers:
  - url: /api/{apiVersion}/
  - url: http://localhost:3000/v5/
  - url: https://api.topcoder-dev.com/{apiVersion}/
    variables:
      apiVersion:
        default: "v5"
        description: The REST API version
tags:
  - name: Jobs
  - name: JobCandidates
  - name: Interviews
  - name: UserMeetingSettings
  - name: ResourceBookings
  - name: Teams
  - name: WorkPeriods
  - name: WorkPeriodPayments
  - name: Roles
paths:
  /jobs:
    post:
      tags:
        - Jobs
      description: |
        Create job.

        **Authorization** All topcoder members are allowed

        Permission rules on field `isApplicationPageActive`:
          - M2M user is allowed to set the value of the field
          - Other users are not allowed to set the value of the field

      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Jobs
      description: |
        Search jobs.

        **Authorization** All topcoder members are allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum: ["id", "createdAt", "updatedAt", "startDate", "rateType", "status"]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
          description: The sort order.
        - in: query
          name: projectId
          required: false
          schema:
            type: integer
          description: The project id.
        - in: query
          name: jobLocation
          required: false
          schema:
            type: string
          description: The location of the jobs.
        - in: query
          name: minSalary
          required: false
          schema:
            type: integer
          description: The minimum Salary.
        - in: query
          name: maxSalary
          required: false
          schema:
            type: integer
          description: The maximum Salary.
        - in: query
          name: isApplicationPageActive
          required: false
          schema:
            type: boolean
          description: Is application page active.
        - in: query
          name: projectIds
          required: false
          schema:
            type: string
          description: The project ids, separated by commas.
        - in: query
          name: externalId
          required: false
          schema:
            type: string
          description: The external id.
        - in: query
          name: description
          required: false
          schema:
            type: string
          description: The description.
        - in: query
          name: title
          required: false
          schema:
            type: string
            maxLength: 64
          description: The title.
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
          description: The job start date.
        - in: query
          name: resourceType
          required: false
          schema:
            type: string
          description: The resource type.
        - in: query
          name: skill
          required: false
          schema:
            type: string
          description: The skill.
        - in: query
          name: workload
          required: false
          schema:
            type: string
            enum: ["full-time", "fractional"]
          description: The rate type.
        - in: query
          name: rateType
          required: false
          schema:
            type: string
            enum: ["hourly", "daily", "weekly", "monthly", "annual"]
          description: The rate type.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: ["sourcing", "in-review", "assigned", "closed", "cancelled"]
          description: The rate type.
        - in: query
          name: specialJob
          required: false
          schema:
            type: boolean
          description: When passing true, the API will load all featured and showInHotList jobs at once
        - in: query
          name: featured
          required: false
          schema:
            type: boolean
          description: The featured jobs
        - in: query
          name: rcrmStatus
          required: false
          schema:
            type: string
            enum: ["Open", "On Hold", "Canceled", "Draft", "Closed", "Did not Post"]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobSearchBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Job"

          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobs/{id}:
    get:
      tags:
        - Jobs
      description: |
        Get job information by id.

        **Authorization** All topcoder members are allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job id.
          required: true
          schema:
            type: string
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Jobs
      description: |
        Delete the job.

        **Authorization** Every topcoder member can delete the job he/she created. bookingmanager can delete all jobs.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "The id of job."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Jobs
      description: |
        Update the job.

        **Authorization** Every topcoder member can update the job he/she created. bookingmanager and connectmember can update all jobs.

        Permission rules on field `isApplicationPageActive`:
          - M2M user is allowed to update the value of the field
          - Other users are not allowed to update the value of the field
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of job
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/JobRequestBody"
                - $ref: "#/components/schemas/JobPatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Jobs
      description: |
        Update job.

        **Authorization** Topcoder token with patch job scope is allowed

        Permission rules on field `isApplicationPageActive`:
          - M2M user is allowed to update the value of the field
          - Other users are not allowed to update the value of the field
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id job.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobPatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates:
    post:
      tags:
        - JobCandidates
      description: |
        Create Job candidate.

        **Authorization** Topcoder token with write JobCandidate scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobCandidateRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCandidate"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - JobCandidates
      description: |
        Search job candidate.

        **Authorization** Topcoder token with read JobCandidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum: ["id", "status"]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
        - in: query
          name: jobId
          required: false
          schema:
            type: string
            format: uuid
          description: The job id.
        - in: query
          name: userId
          required: false
          schema:
            type: string
            example: '443211'
            description: 'The topcoder user id'
          description: The user id.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              [
                "open",
                "placed",
                "selected",
                "client rejected - screening",
                "client rejected - interview",
                "rejected - other",
                "cancelled",
                "interview",
                "topcoder-rejected",
                "applied",
                "rejected-pre-screen",
                "skills-test",
                "phone-screen",
                "job-closed",
                "offered",
              ]
          description: The job candidate status.
        - in: query
          name: externalId
          required: false
          schema:
            type: string
          description: The external id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobCandidateSearchBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobCandidateInterviewsIncluded"

          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates/{id}:
    get:
      tags:
        - JobCandidates
      description: |
        Get job candidate information by id.

        **Authorization** Topcoder token with read job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCandidateInterviewsIncluded"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - JobCandidates
      description: |
        Delete the job.

        **Authorization** Topcoder token with delete job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - JobCandidates
      description: |
        Update the job candidate.

        **Authorization** Topcoder token with update JobCandidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/JobCandidateRequestBody"
                - $ref: "#/components/schemas/JobCandidatePatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCandidate"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - JobCandidates
      description: |
        Partail update job candidate.

        **Authorization** Topcoder token with update Job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobCandidatePatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCandidate"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates/{id}/resume:
    get:
      tags:
        - JobCandidates
      description: |
        Get job candidate resume by id.

        **Authorization** Topcoder token with read job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/msword:
              schema:
                $ref: "#/components/schemas/JobCandidateResume"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates/{jobCandidateId}/requestInterview:
    patch:
      tags:
        - Interviews
      description: |
        Request a new interview.

        **Authorization** Topcoder token with create interview scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jobCandidateId
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestInterviewBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates/{jobCandidateId}/updateInterview/{round}:
    patch:
      tags:
        - Interviews
      description: |
        Partially update interview.

        **Authorization** Topcoder token with update interview scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jobCandidateId
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: round
          description: The interview round.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInterviewByRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /updateInterview/{id}:
    patch:
      tags:
        - Interviews
      description: |
        Partially update interview.

        **Authorization** Topcoder token with update interview scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The interview id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInterviewByRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates/{jobCandidateId}/interviews:
    get:
      tags:
        - Interviews
      description: |
        Search interviews.

        **Authorization** Topcoder token with read interview scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jobCandidateId
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: createdAt
            enum: ["round", "createdAt", "updatedAt"]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
        - in: query
          name: createdAt
          required: false
          schema:
            type: string
            format: date-time
          description: The creation date/time of interview.
        - in: query
          name: updatedAt
          required: false
          schema:
            type: string
            format: date-time
          description: The last update date/time of interview.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: ["Requested"]
          description: The interview status.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /jobCandidates/{jobCandidateId}/interviews/{round}:
    get:
      tags:
        - Interviews
      description: |
        Get interview by round.

        **Authorization** Topcoder token with read interview scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jobCandidateId
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: round
          description: The interview round.
          required: true
          schema:
            type: integer
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /getInterview/{id}:
    get:
      tags:
        - Interviews
      description: |
        Get interview by id.

        **Authorization** Topcoder token with read interview scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The interview id.
          required: true
          schema:
            type: string
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Interview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /getInterview/{id}/zoom-link:
    get:
      tags:
        - Interviews
      description: |
        Get a fresh Zoom Links from Zoom Meeting and redirect to Zoom Link.

      parameters:
        - in: path
          name: id
          description: The interview id.
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: the zoom link type (host or guest).
          required: true
          schema:
            type: string
            enum:
              - host
              - guest
        - in: query
          name: token
          description: the request token.
          required: true
          schema:
            type: string
      responses:
        "302":
          description: Redirect to link of Zoom Meeting
          headers:
            Location:
              description: Zoom Meeting Link.
              schema:
                type: string
                format: uri
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /resourceBookings:
    post:
      tags:
        - ResourceBookings
      description: |
        Create Resource booking.

        **Authorization** Topcoder token with write Resource booking scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceBookingRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceBooking"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - ResourceBookings
      description: |
        Search resource booking.

        **Authorization** Topcoder token with read resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: fields
          description: the field names to be returned from all ResourceBooking, WorkPeriod and WorkPeriodPayment
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum:
              [
                "id",
                "status",
                "startDate",
                "endDate",
                "rateType",
                "customerRate",
                "memberRate",
                "workPeriods.userHandle",
                "workPeriods.daysWorked",
                "workPeriods.customerRate",
                "workPeriods.memberRate",
                "workPeriods.paymentStatus",
              ]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: ["placed", "in-progress", "completed"]
          description: The status.
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
          description: The resource booking start date.
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date
          description: The resource booking end date.
        - in: query
          name: rateType
          required: false
          schema:
            type: string
            enum: ["hourly", "daily", "weekly", "monthly"]
          description: The rate type.
        - in: query
          name: jobId
          required: false
          schema:
            type: string
            format: uuid
          description: The job id.
        - in: query
          name: userId
          required: false
          schema:
            type: string
            example: '443211'
            description: 'The topcoder user id'
          description: The job id.
        - in: query
          name: projectId
          required: false
          schema:
            type: integer
          description: The project id.
        - in: query
          name: projectIds
          required: false
          schema:
            type: string
          description: comma separated project ids.
        - in: query
          name: billingAccountId
          required: false
          schema:
            type: integer
          description: billing account id. 0 represents null value.
        - in: query
          name: workPeriods.paymentStatus
          required: false
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  enum:
                    ["pending", "partially-completed", "completed", "cancelled"]
              - type: string
                enum:
                  ["pending", "partially-completed", "completed", "cancelled"]
          description: comma separated payment status.
        - in: query
          name: workPeriods.startDate
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
          description: The work period start date. Should be Sunday.
        - in: query
          name: workPeriods.endDate
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
          description: The work period end date. Should be Saturday.
        - in: query
          name: workPeriods.userHandle
          required: false
          schema:
            type: string
          description: The user handle.
        - in: query
          name: workPeriods.isFirstWeek
          required: false
          schema:
            type: boolean
            default: false
          description: |
            the week which matches workPeriods.startDate is the first one in the RB.
            workPeriods.startDate is required.
            only one of workPeriods.isFirstWeek and workPeriods.isLastWeek is allowed.
        - in: query
          name: workPeriods.isLastWeek
          required: false
          schema:
            type: boolean
            default: false
          description: |
            the week which matches workPeriods.startDate is the last one in the RB.
            workPeriods.startDate is required.
            only one of workPeriods.isFirstWeek and workPeriods.isLastWeek is allowed.
        - in: query
          name: workPeriods.payments.status
          required: false
          schema:
            type: string
          description: The status of the payment
        - in: query
          name: workPeriods.payments.days
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
            example: 3
          description: The workdays to pay
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceBookingSearchBody"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceBooking"

          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /resourceBookings/{id}:
    get:
      tags:
        - ResourceBookings
      description: |
        Get resource booking by id.

        **Authorization** Topcoder token with read resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The resource booking id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
        - in: query
          name: fields
          description: the field names to be returned from all ResourceBooking, WorkPeriod and WorkPeriodPayment
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceBooking"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - ResourceBookings
      description: |
        Delete the resource booking.

        **Authorization** Topcoder token with delete resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of resource booking.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - ResourceBookings
      description: |
        Update the resource booking.

        **Authorization** Topcoder token with update resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of resource booking.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ResourceBookingRequestBody"
                - $ref: "#/components/schemas/ResourceBookingPatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceBooking"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - ResourceBookings
      description: |
        Partial Update resource booking.

        **Authorization** Topcoder token with update job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of resource booking.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceBookingPatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceBooking"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-periods:
    get:
      tags:
        - WorkPeriods
      description: |
        Search work period.

        **Authorization** Topcoder token with read work period scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum:
              [
                "id",
                "resourceBookingId",
                "userHandle",
                "projectId",
                "paymentStatus",
                "startDate",
                "endDate",
                "daysWorked",
                "customerRate",
                "memberRate",
              ]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
        - in: query
          name: resourceBookingId
          required: false
          schema:
            type: string
            format: uuid
          description: The resource booking id.
        - in: query
          name: resourceBookingIds
          required: false
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  format: uuid
              - type: string
          description: comma separated resource booking ids.
        - in: query
          name: paymentStatus
          required: false
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  enum:
                    [
                      "pending",
                      "partially-completed",
                      "completed",
                      "in-progress",
                      "failed",
                      "no-days",
                    ]
              - type: string
                enum:
                  [
                    "pending",
                    "partially-completed",
                    "completed",
                    "in-progress",
                    "failed",
                    "no-days",
                  ]
          description: comma separated payment status.
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
          description: The work period start date.
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{4}-\d{2}-\d{2}$'
          description: The work period end date.
        - in: query
          name: userHandle
          required: false
          schema:
            type: string
          description: The user handle.
        - in: query
          name: projectId
          required: false
          schema:
            type: integer
          description: The project id.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkPeriod"
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-periods/{id}:
    get:
      tags:
        - WorkPeriods
      description: |
        Get work period by id.

        **Authorization** Topcoder token with read work period scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The work period id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkPeriod"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - WorkPeriods
      description: |
        Partial Update work period.

        **Authorization** Topcoder token with update work period scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of work period.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkPeriodPatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkPeriod"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-period-payments:
    post:
      tags:
        - WorkPeriodPayments
      description: |
        Create Work Period Payment.

        **Authorization** Topcoder token with write Work period payment scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/WorkPeriodPaymentCreateRequestBody"
                - type: array
                  items:
                    $ref: "#/components/schemas/WorkPeriodPaymentCreateRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/WorkPeriodPayment"
                  - type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/WorkPeriodPayment"
                        - $ref: "#/components/schemas/WorkPeriodPaymentCreatedError"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - WorkPeriodPayments
      description: |
        Search work period payment.

        **Authorization** Topcoder token with read work period payment scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: createdAt
            enum: ["status", "amount", "createdAt", "updatedAt"]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
        - in: query
          name: workPeriodId
          required: false
          schema:
            type: string
            format: uuid
          description: The work period id.
        - in: query
          name: workPeriodIds
          required: false
          schema:
            oneOf:
              - type: array
                items:
                  type: string
                  format: uuid
              - type: string
          description: comma separated work period ids.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              ["completed", "scheduled", "in-progress", "failed", "cancelled"]
          description: The payment status.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkPeriodPayment"
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-period-payments/query:
    post:
      tags:
        - WorkPeriodPayments
      description: |
        Create Multiple Work Period Payments for all the pages at once.

        **Authorization** Topcoder token with write Work period payment scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkPeriodPaymentQueryCreateRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkPeriodPaymentQueryCreateResult"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /work-period-payments/{id}:
    get:
      tags:
        - WorkPeriodPayments
      description: |
        Get work period payment by id.

        **Authorization** Topcoder token with read work period payment scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The work period payment id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkPeriodPayment"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - WorkPeriodPayments
      description: |
        Partial Update work period payment.

        **Authorization** Topcoder token with update work period payment scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of work period payment.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkPeriodPaymentPatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkPeriodPayment"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /work-period-payments/bulk:
    post:
      tags:
        - WorkPeriodPayments
      description: |
        Create Work Period Payments in Bulk.

        **Authorization** Topcoder token with write Work period payment scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WorkPeriodPaymentCreateRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/WorkPeriodPayment"
                    - $ref: "#/components/schemas/WorkPeriodPaymentCreatedError"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - WorkPeriodPayments
      description: |
        Partial Update work period payments in bulk.

        **Authorization** Topcoder token with update work period payment scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WorkPeriodPaymentPatchRequestBodyInBulk"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/WorkPeriodPayment"
                    - $ref: "#/components/schemas/WorkPeriodPaymentUpdatedError"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams:
    get:
      tags:
        - Teams
      description: |
        Search my teams. Teams is project in topcoder with type=='talent-as-a-service'
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: createdAt
            enum:
              [
                "createdAt",
                "updatedAt",
                "lastActivityAt",
                "id",
                "status",
                "name",
                "type",
                "best match",
              ]
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ["desc", "asc"]
          description: The sort order. Not allowed when sortBy is `best match`.
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: filter by name, case-insensitive; support wildcard match.
          example: "*taas*"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/{id}:
    get:
      tags:
        - Teams
      description: |
        Gets the team details. Should check if user has permission on the project or not by checking if he is connect user or not
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDetail"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/{id}/jobs/{jobId}:
    get:
      tags:
        - Teams
      description: |
        Gets the job details including all candidates. Should check if user has permission on the project or not by checking if he is connect user or not
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
        - in: path
          name: jobId
          required: true
          schema:
            type: string
            format: uuid
          description: The job id.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobDetail"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/{id}/members:
    post:
      tags:
        - Teams
      description: |
        Add members to a team by handle or email.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMembersRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddMembersResponseBody"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Teams
      description: |
        Search members in a team.
        Serves as a proxy endpoint for `GET /projects/{projectId}/members`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
        - in: query
          name: fields
          required: false
          schema:
            type: string
          description: Fields to be returned.
        - in: query
          name: role
          required: false
          schema:
            type: string
          description: Filtered by a specific role.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectMember"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /taas-teams/user-meeting-settings/{userId}:
    get:
      tags:
        - UserMeetingSettings
      description: |
        Get the User's Meeting Settings.

        **Authorization** This endpoint could be called by: "hasManagePermission" users, M2M tokens with scopes "read:taas-userMeetingsSettings" or "all:taas-userMeetingsSettings". Also any user can call this endpoint to get setting for themselves
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          description: 'The topcoder user id'
          required: true
          schema:
            type: string
            example: '443211'

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMeetingSettings"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/user-meeting-settings/{userId}/calendars/{calendarId}:
    delete:
      tags:
        - UserMeetingSettings
      description: |
        Delete a calendar from the User's Meeting Settings' nylasCalendars array.

        This endpoint deletes a connected calendar in Nylas by deleting it from the nylasCalendars array inside UserMeetingSettings object.
        Note, this does not delete the calendar in Nylas backend server - intentionally, it only deletes from UserMeetingSettings array.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          description: The topcoder id of the User whose calendar should be deleted
          required: true
          schema:
            type: string
            example: '443211'
            description: 'The topcoder user id'
        - in: path
          name: calendarId
          description: The id of the calendar to delete. This id comes from Nylas backend server
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /taas-teams/{id}/invites:
    get:
      tags:
        - Teams
      description: |
        Search member invites for a team.
        Serves as a proxy endpoint for `GET /projects/{projectId}/invites`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
        - in: query
          name: fields
          required: false
          schema:
            type: string
          description: Fields to be returned.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectMemberInvite"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/{id}/members/{projectMemberId}:
    delete:
      tags:
        - Teams
      description: |
        Remove a member from a team.
        Serves as a proxy endpoint for `DELETE /projects/{projectId}/members/{id}`.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
        - in: path
          name: projectMemberId
          required: true
          schema:
            type: integer
          description: The id of the project member.
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/skills:
    get:
      tags:
        - Teams
      description: |
        Serves as a proxy endpoint for /v5/skills, allowing to be accessed by any topcoder user.
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - name: orderBy
          in: query
          schema:
            type: string
          description: "Specify by which field to sort by. Sorts in ascending order only"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SkillInSkillsAPI"
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /taas-teams/getSkillsByJobDescription:
    post:
      tags:
        - Teams
      description: |
        Get skill list by Job Description
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamJobDescriptionRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/SkillItem" }
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/email:
    post:
      tags:
        - Teams
      description: |
        Send emails through one of predefined templates.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamEmailRequestBody"
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /taas-teams/me:
    get:
      tags:
        - Teams
      description: |
        Return details about the current user.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UbahnUser"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/sendRoleSearchRequest:
    post:
      tags:
        - Teams
      description: |
        Perform a role search operaion

        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-roleSearchRequests scope is allowed.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleSearchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleSearchResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/submitTeamRequest:
    post:
      tags:
        - Teams
      description: |
        Creates new Team in persistence and new project that will source this team in Connect.

        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-teams scope is allowed.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitTeamRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitTeamResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/calculateAmount:
    post:
      tags:
        - Teams
      description: |
        Calculates total amount for the team.

        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-teams scope is allowed.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CalculateAmountRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CalculateAmountResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/createPayment:
    post:
      tags:
        - Teams
      description: |
        Calculates total amount for the team.

        **Authorization** Any Topcoder user with valid token is allowed. For not logged users Topcoder m2m token with create:taas-teams scope is allowed.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePaymentRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePaymentResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/isExternalMember:
    post:
      tags:
        - Teams
      description: |
        Finds whether member is internal or external

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IsExternalMemberRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsExternalMemberResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-teams/members-suggest/{fragment}:
    get:
      tags:
        - Teams
      description: |
        Returns suggested members for the given handle fragment
      parameters:
        - in: path
          name: fragment
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SuggestedMember"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-roles:
    post:
      tags:
        - Roles
      description: |
        Create Role.

        **Authorization** Topcoder m2m token with create scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - Roles
      description: |
        Search roles.

        **Authorization** Topcoder m2m token with read scope is allowed. Topcoder user token with any role is allowed.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skillsList
          required: false
          schema:
            type: string
          description: comma separated skill names. case-insensitive.
        - in: query
          name: keyword
          required: false
          schema:
            type: string
          description: role name. case-insensitive. partial match allowed
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /taas-roles/{id}:
    get:
      tags:
        - Roles
      description: |
        Get role by id.

        **Authorization** Topcoder m2m token with read scope is allowed. Topcoder user token with any role is allowed.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The role id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Roles
      description: |
        Partial Update role.

        **Authorization** Topcoder m2m token with update scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of role.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RolePatchRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Roles
      description: |
        Delete the role.

        **Authorization** Topcoder m2m token with delete scope is allowed. Topcoder user token with administrator or bookingmanager role is allowed.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of role.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /health:
    get:
      tags:
        - Health
      description: |
        Get health status of the app.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckRun"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckRun"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SkillItem:
      properties:
        id:
          type: string
          format: uuid
        tag:
          type: string
          example: "Java"
        type:
          type: string
          example: "taas_skill"
        source:
          type: string
          example: "taas-jd-parser"

    Job:
      required:
        - id
        - projectId
        - title
        - numPositions
        - skills
        - status
        - minSalary
        - maxSalary
        - hoursPerWeek
        - jobLocation
        - jobTimezone
        - currency
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        projectId:
          type: integer
          example: 21
          description: "The project id."
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        title:
          type: string
          example: "Dummy title"
          description: "The title."
          maxLength: 64
        startDate:
          type: string
          format: date
          example: "2020-09-27"
          description: "The job start date."
        duration:
          type: integer
          example: 1
          description: "The duration in weeks"
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        resourceType:
          type: string
          example: "Dummy Resource Type"
          description: "The resource type of job."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        workload:
          type: string
          enum: ["full-time", "fractional"]
          description: "The workload of the job."
        skills:
          type: array
          description: "The skills."
          items:
            type: string
            format: uuid
            description: "The skill id."
        roleIds:
          type: array
          description: "The roles."
          items:
            type: string
            format: uuid
            description: "The role id."
        status:
          type: string
          enum: ["sourcing", "in-review", "assigned", "closed", "cancelled"]
          description: "The job status."
        candidates:
          type: array
          description: "The job candidates."
          items:
            $ref: "#/components/schemas/JobCandidate"
        isApplicationPageActive:
          type: boolean
          default: false
        minSalary:
          type: integer
          example: 1000
          description: "the amount of minimum salary"
        maxSalary:
          type: integer
          example: 3000
          description: "the amount of maximum salary"
        hoursPerWeek:
          type: integer
          example: 20
          description: "the amount working hours per week"
        jobLocation:
          type: string
          example: "Any location"
          description: "the location of job"
        jobTimezone:
          type: string
          example: "GMT"
          description: "the timezone of job"
        currency:
          type: string
          example: "USD"
          description: "the currency of job"
        showInHotList:
          type: boolean
          default: false
          description: "Whether to show job in hot list"
        featured:
          type: boolean
          default: false
          description: "Whether a job is a featured job"
        hotListExcerpt:
          type: string
          default: ''
          description: "A text to show for the hotlist excerpt"
        jobTag:
          type: string
          default: ''
          enum: ["New", "$$$", "Hot", ""]
          description: "the job tag"
        rcrmStatus:
          type: string
          default: null
          enum: [null, "Open", "On Hold", "Canceled", "Draft", "Closed"]
          description: "the job rcrm status"
        rcrmReason:
          type: string
          default: null
          description: "the possible rcrm reason for current status"
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: "topocder user"
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: "topcoder user"
          description: "The user who updated the job last time.(Will get the user info from the token)"
    JobSearchBody:
      properties:
        bodySkills:
          type: array
          items:
            type: string
            format: uuid
            description: "The array of skill ids"
        jobIds:
          type: array
          items:
            type: string
            format: uuid
            description: "The array of job ids"

    JobRequestBody:
      required:
        - projectId
        - title
        - numPositions
        - skills
        - minSalary
        - maxSalary
        - hoursPerWeek
        - jobLocation
        - jobTimezone
        - currency
      properties:
        projectId:
          type: integer
          example: 21
          description: "The project id."
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        title:
          type: string
          example: "Dummy title"
          description: "The title."
          maxLength: 64
        status:
          type: string
          enum: ["sourcing", "in-review", "assigned", "closed", "cancelled"]
          description: "The job status."
          default: sourcing
        startDate:
          type: string
          format: date
          example: "2020-09-27"
          description: "The job start date."
        duration:
          type: integer
          example: 1
          description: "The duration in weeks"
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        resourceType:
          type: string
          example: "Dummy Resource Type"
          description: "The resource type of job."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        workload:
          type: string
          enum: ["full-time", "fractional"]
          description: "The workload of the job."
        skills:
          type: array
          description: "The skills."
          items:
            type: string
            format: uuid
            description: "The skill id."
        roleIds:
          type: array
          description: "The roles."
          items:
            type: string
            format: uuid
            description: "The role id."
        showInHotList:
          type: boolean
          default: false
        featured:
          type: boolean
          default: false
        hotListExcerpt:
          type: string
          example: "This is very hot job"
          description: "The further instruction to show for the hot job"
        jobTag:
          type: string
          enum: ["", "New", "$$$", "Hot"]
          description: "The tag of a job"
        rcrmStatus:
          type: string
          default: null
          enum: [null, "Open", "On Hold", "Canceled", "Draft", "Closed"]
          description: "the job rcrm status"
        rcrmReason:
          type: string
          default: null
          description: "the possible rcrm reason for current status"
        isApplicationPageActive:
          type: boolean
          default: false
        minSalary:
          type: integer
          example: 1000
          description: "the amount of minimum salary"
        maxSalary:
          type: integer
          example: 3000
          description: "the amount of maximum salary"
        hoursPerWeek:
          type: integer
          example: 20
          description: "the amount working hours per week"
        jobLocation:
          type: string
          example: "Any location"
          description: "the location of job"
        jobTimezone:
          type: string
          example: "GMT"
          description: "the timezone of job"
        currency:
          type: string
          example: "USD"
          description: "the currency of job"
    JobCandidate:
      required:
        - id
        - jobId
        - userId
        - status
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        jobId:
          type: string
          format: uuid
          description: "The project id."
        userId:
          type: string
          example: '443211'
          description: "The topcoder user id."
        status:
          type: string
          enum:
            [
              "open",
              "placed",
              "selected",
              "client rejected - screening",
              "client rejected - interview",
              "rejected - other",
              "cancelled",
              "interview",
              "topcoder-rejected",
              "applied",
              "rejected-pre-screen",
              "skills-test",
              "phone-screen",
              "job-closed",
              "offered",
              "withdrawn",
              "withdrawn-prescreen",
            ]
          description: "The job candidate status."
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        resume:
          type: string
          example: "http://example.com"
          description: "The resume link"
        remark:
          type: string
          example: "excellent"
          description: "The remark of candidate"
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: "topocder user"
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: "topcoder user"
          description: "The user who updated the job last time.(Will get the user info from the token)"
    JobCandidateInterviewsIncluded:
      required:
        - id
        - jobId
        - userId
        - status
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        jobId:
          type: string
          format: uuid
          description: "The project id."
        userId:
          type: string
          example: '443211'
          description: "The topcoder user id."
        status:
          type: string
          enum:
            [
              "open",
              "selected",
              "shortlist",
              "rejected",
              "cancelled",
              "interview",
            ]
          description: "The job candidate status."
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        resume:
          type: string
          example: "http://example.com"
          description: "The resume link"
        remark:
          type: string
          example: "excellent"
          description: "The remark of candidate"
        interviews:
          type: array
          description: "Interviews associated to this job candidate."
          items:
            $ref: "#/components/schemas/Interview"
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: "topocder user"
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: "topcoder user"
          description: "The user who updated the job last time.(Will get the user info from the token)"
    JobCandidateSearchBody:
      properties:
        statuses:
          type: array
          items:
            type: string
            enum:
              [
                "open",
                "placed",
                "selected",
                "client rejected - screening",
                "client rejected - interview",
                "rejected - other",
                "cancelled",
                "interview",
                "topcoder-rejected",
                "applied",
                "rejected-pre-screen",
                "skills-test",
                "phone-screen",
                "job-closed",
                "offered",
                "withdrawn",
                "withdrawn-prescreen",
              ]
            description: "The array of job Candidates status"
    JobCandidateResume:
        type: string
        format: binary
    JobCandidateRequestBody:
      required:
        - jobId
        - userId
      properties:
        jobId:
          type: string
          format: uuid
          description: "The project id."
        userId:
          type: string
          example: '443211'
          description: "The topcoder user id."
        status:
          type: string
          enum:
            [
              "open",
              "placed",
              "selected",
              "client rejected - screening",
              "client rejected - interview",
              "rejected - other",
              "cancelled",
              "interview",
              "topcoder-rejected",
              "applied",
              "rejected-pre-screen",
              "skills-test",
              "phone-screen",
              "job-closed",
              "offered",
              "withdrawn",
              "withdrawn-prescreen",
            ]
          description: "The job candidate status."
          default: open
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        resume:
          type: string
          example: "http://example.com"
          description: "The resume link"
        remark:
          type: string
          example: "excellent"
          description: "The remark of candidate"
    JobCandidatePatchRequestBody:
      properties:
        status:
          type: string
          enum:
            [
              "open",
              "placed",
              "selected",
              "client rejected - screening",
              "client rejected - interview",
              "rejected - other",
              "cancelled",
              "interview",
              "topcoder-rejected",
              "applied",
              "rejected-pre-screen",
              "skills-test",
              "phone-screen",
              "job-closed",
              "offered",
              "withdrawn",
              "withdrawn-prescreen",
            ]
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        resume:
          type: string
          example: "http://example.com"
          description: "The resume link"
        remark:
          type: string
          example: "excellent"
          description: "The remark of candidate"
    Interview:
      required:
        - id
        - jobCandidateId
        - round
        - status
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The interview id."
        jobCandidateId:
          type: string
          format: uuid
          description: "The job candidate id."
        round:
          type: integer
          example: 1
          description: "The interview round."
        duration:
          type: integer
          example: 30
          description: "The interview duration (in minutes)."
        startTimestamp:
          type: string
          format: date-time
          description: "Interview start time."
        endTimestamp:
          type: string
          format: date-time
          description: "Interview end time."
        hostTimezone:
          type: string
          description: "Timezone of interview host."
        guestTimezone:
          type: string
          description: "Timezone of interview candidate."
        nylasPageId:
          type: string
          description: 'Associated Nylas page id.'
        nylasPageSlug:
          type: string
          description: 'Associated Nylas page slug.'
        nylasCalendarId:
          type: string
          description: 'Associated Nylas calendar id.'
        nylasEventId:
          type: string
          description: 'Associated Nylas event id.'
        nylasEventEditHash:
          type: string
          description: 'Associated Nylas event edit hash.'
        status:
          type: string
          enum:
            [
              "Scheduling",
              "Scheduled",
              "Requested for reschedule",
              "Rescheduled",
              "Completed",
              "Cancelled",
            ]
          description: "The interview status."
        createdAt:
          type: string
          format: date-time
          description: "The interview created date."
        createdBy:
          type: string
          format: uuid
          description: "The user who created the interview.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The interview last updated at."
        updatedBy:
          type: string
          format: uuid
          description: "The user who updated the interview last time.(Will get the user info from the token)"
    CandidateInterview:
      required:
        - id
        - jobCandidateId
        - round
        - status
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The interview id."
        hostFirstName:
          type: string
          example: "nkumar"
          description: "The firstName of the interview host"
        hostLastName:
          type: string
          example: "nkumar"
          description: "The lastName of the interview host"
        hostHandle:
          type: string
          example: "nkumartest"
          description: "The handle of the interview host"
        hostUserId:
          type: string
          example: "442321"
          description: "The topcoder userId of the interview host"
        jobCandidateId:
          type: string
          format: uuid
          description: "The job candidate id."
        round:
          type: integer
          example: 1
          description: "The interview round."
        duration:
          type: integer
          example: 30
          description: "The interview duration (in minutes)."
        startTimestamp:
          type: string
          format: date-time
          description: "Interview start time."
        endTimestamp:
          type: string
          format: date-time
          description: "Interview end time."
        status:
          type: string
          enum:
            [
              "Scheduling",
              "Scheduled",
              "Requested for reschedule",
              "Rescheduled",
              "Completed",
              "Cancelled",
            ]
          description: "The interview status."
        createdAt:
          type: string
          format: date-time
          description: "The interview created date."
        createdBy:
          type: string
          format: uuid
          description: "The user who created the interview.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The interview last updated at."
        updatedBy:
          type: string
          format: uuid
          description: "The user who updated the interview last time.(Will get the user info from the token)"
    RequestInterviewBody:
      required:
        - duration
        - hostTimezone
        - availableTime
      properties:
        duration:
          type: integer
          example: 30
          description: "duration of the interview"
        hostTimezone:
          type: string
          example: "Europe/London"
        availableTime:
          type: array
          items:
            type: object
            required:
              - days
              - start
              - end
            properties:
              days:
                type: array
                items:
                  type: string
                  enum: ["M", "T", "W", "R", "F", "S", "U"]
              start:
                type: string
                example: "09:00"
                pattern: "^[0-9]{1,2}:[0-9]{2}$"
              end:
                type: string
                example: "10:00"
                pattern: "^[0-9]{1,2}:[0-9]{2}$"
        hostUserId:
          type: string
          example: '443211'
          description: 'The topcoder user id of the host'

    UpdateInterviewByRequestBody:
      properties:
        duration:
          type: integer
          example: 30
          description: "duration of the interview"
        hostTimezone:
          type: string
          example: "Europe/London"
        hostUserId:
          type: string
          description: "The topcoder id of interview host user"
        expireTimestamp:
          type: string
          format: date-time
          description: "Interview expiry time stamp."
        availableTime:
          type: array
          items:
            type: object
            required:
              - days
              - start
              - end
            properties:
              days:
                type: array
                items:
                  type: string
                  enum: ["M", "T", "W", "R", "F", "S", "U"]
              start:
                type: string
                example: "09:00"
                pattern: "^[0-9]{1,2}:[0-9]{2}$"
              end:
                type: string
                example: "10:00"
                pattern: "^[0-9]{1,2}:[0-9]{2}$"
        startTimestamp:
          type: string
          format: date-time
          description: "Interview start time."
        endTimestamp:
          type: string
          format: date-time
          description: "Interview end time."
        status:
          type: string
          enum: ["Scheduling", "Scheduled", "Requested for reschedule", "Rescheduled", "Completed", "Cancelled", "Expired"]
        deletedAt:
          type: string
          format: date-time

    JobPatchRequestBody:
      properties:
        status:
          type: string
          enum: ["sourcing", "in-review", "assigned", "closed", "cancelled"]
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        startDate:
          type: string
          format: date
          example: "2020-09-27"
          description: "The job start date."
        duration:
          type: integer
          example: 1
          description: "The duration in weeks"
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        resourceType:
          type: string
          example: "Dummy Resource Type"
          description: "The resource type of job."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        workload:
          type: string
          enum: ["full-time", "fractional"]
          description: "The workload of the job."
        skills:
          type: array
          description: "The skills."
          items:
            type: string
            format: uuid
            description: "The skill id."
        roleIds:
          type: array
          description: "The roles."
          items:
            type: string
            format: uuid
            description: "The role id."
        showInHotList:
          type: boolean
          default: false
        featured:
          type: boolean
          default: false
        hotListExcerpt:
          type: string
          example: "This is very hot job"
          description: "The further instruction to show for the hot job"
        jobTag:
          type: string
          enum: ["", "New", "$$$", "Hot"]
          description: "The tag of a job"
        rcrmStatus:
          type: string
          default: null
          enum: [null, "Open", "On Hold", "Canceled", "Draft", "Closed"]
          description: "the job rcrm status"
        rcrmReason:
          type: string
          default: null
          description: "the possible rcrm reason for current status"
        isApplicationPageActive:
          type: boolean
          default: false
        minSalary:
          type: integer
          example: 1000
          description: "the amount of minimum salary"
        maxSalary:
          type: integer
          example: 3000
          description: "the amount of maximum salary"
        hoursPerWeek:
          type: integer
          example: 20
          description: "the amount working hours per week"
        jobLocation:
          type: string
          example: "Any location"
          description: "the location of job"
        jobTimezone:
          type: string
          example: "GMT"
          description: "the timezone of job"
        currency:
          type: string
          example: "USD"
          description: "the currency of job"
    ResourceBooking:
      required:
        - id
        - projectId
        - userId
        - status
        - rateType
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        projectId:
          type: integer
          example: 21
          description: "The project id."
        userId:
          type: string
          example: "442312"
          description: "The topcoder id."
        jobId:
          type: string
          format: uuid
          description: "The external id."
        status:
          type: string
          enum: ["placed", "closed", "cancelled"]
          description: "The job status."
        startDate:
          type: string
          format: date
          example: "2020-09-27"
          description: "The job start date."
        endDate:
          type: string
          format: date
          example: "2020-09-28"
          description: "The job end date."
        memberRate:
          type: integer
          format: float
          example: 13
          description: "The member rate."
        sendWeeklySurvey:
          type: boolean
          example: true,
          description: "whether we should send weekly survey to this ResourceBooking or no"
        customerRate:
          type: integer
          format: float
          example: 13
          description: "The customer rate."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        billingAccountId:
          type: integer
          example: 80000071
          description: "the billing account id for payments"
        workPeriods:
          type: array
          description: "The work periods related with resource booking"
          items:
            $ref: "#/components/schemas/WorkPeriod"
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: "topocder user"
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: "topcoder user"
          description: "The user who updated the job last time.(Will get the user info from the token)"
    ResourceBookingSearchBody:
      properties:
        jobIds:
          type: array
          items:
            type: string
            format: uuid
            description: "The array of job ids"
    ResourceBookingRequestBody:
      required:
        - projectId
        - userId
        - rateType
      properties:
        projectId:
          type: integer
          example: 21
          description: "The project id."
        userId:
          type: string
          example: "442321"
          description: "The topcoder id."
        sendWeeklySurvey:
          type: boolean
          example: true,
          description: "whether we should send weekly survey to this ResourceBooking or no"
        jobId:
          type: string
          format: uuid
          description: "The job id."
        status:
          type: string
          enum: ["placed", "closed", "cancelled"]
          description: "The job status."
          default: sourcing
        startDate:
          type: string
          format: date
          example: "2020-09-27"
          description: "The job start date."
        endDate:
          type: string
          format: date
          example: "2020-09-28"
          description: "The job end date."
        memberRate:
          type: number
          format: float
          example: 13.23
          description: "The member rate."
        customerRate:
          type: number
          format: float
          example: 13
          description: "The customer rate."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        billingAccountId:
          type: integer
          example: 80000071
          description: "the billing account id for payments"
    ResourceBookingPatchRequestBody:
      properties:
        status:
          type: string
          enum: ["placed", "closed", "cancelled"]
        startDate:
          type: string
          format: date
          example: "2020-09-27"
          description: "The job start date."
        endDate:
          type: string
          format: date
          example: "2020-09-28"
          description: "The job end date."
        memberRate:
          type: number
          format: float
          example: 13.23
          description: "The member rate."
        sendWeeklySurvey:
          type: boolean
          example: true,
          description: "whether we should send weekly survey to this ResourceBooking or no"
        customerRate:
          type: number
          format: float
          example: 13
          description: "The customer rate."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        billingAccountId:
          type: integer
          example: 80000071
          description: "the billing account id for payments"
    WorkPeriod:
      required:
        - id
        - resourceBookingId
        - userHandle
        - projectId
        - startDate
        - endDate
        - daysWorked
        - daysPaid
        - paymentTotal
        - paymentStatus
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The work period id."
        resourceBookingId:
          type: string
          format: uuid
          description: "The resource booking id."
        sentSurvey:
          type: boolean
          example: true
          description: "whether we've already sent a survey for this WorkPeriod of no"
        sentSurveyError:
          description: "error details if error happened during sending survey"
          type: object
          properties:
            errorMessage:
              type: string
              example: "error message"
              description: "The error message"
            errorCode:
              type: integer
              example: 429
              description: "HTTP code of error"
        userHandle:
          type: string
          example: "eisbilir"
          description: "The user handle."
        projectId:
          type: integer
          example: 123
          description: "The project id."
        startDate:
          type: string
          format: date
          example: "2021-03-07"
          description: "The start date of work period. Should be always Sunday."
        endDate:
          type: string
          format: date
          example: "2021-03-13"
          description: "The end date of work period. Should be always Saturday."
        daysWorked:
          type: integer
          minimum: 0
          maximum: 10
          example: 2
          description: "The count of the days worked for that work period."
        daysPaid:
          type: integer
          minimum: 0
          maximum: 5
          format: integer
          example: 1
          description: "The count of paid days for that work period"
        paymentTotal:
          type: integer
          format: float
          example: 13.13
          description: "The total paid amount"
        paymentStatus:
          type: string
          enum:
            [
              "pending",
              "partially-completed",
              "completed",
              "in-progress",
              "failed",
              "no-days",
            ]
          description: "The payment status."
        payments:
          type: array
          description: "The payments related with work period"
          items:
            $ref: "#/components/schemas/WorkPeriodPayment"
        createdAt:
          type: string
          format: date-time
          description: "The work period created date."
        createdBy:
          type: string
          format: uuid
          description: "The user Id who created the work period.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The work period last updated at."
        updatedBy:
          type: string
          format: uuid
          description: "The user Id who updated the work period last time.(Will get the user info from the token)"
    WorkPeriodPatchRequestBody:
      properties:
        daysWorked:
          type: integer
          minimum: 0
          maximum: 10
          example: 2
          description: "The count of the days worked for that work period."
        sentSurvey:
          type: boolean
          example: true
          description: "whether we've already sent a survey for this WorkPeriod of no"
        sentSurveyError:
          description: "error details if error happened during sending survey"
          type: object
          properties:
            errorMessage:
              type: string
              example: "error message"
              description: "The error message"
            errorCode:
              type: integer
              example: 429
              description: "HTTP code of error"
    WorkPeriodPayment:
      required:
        - id
        - workPeriodId
        - memberRate
        - days
        - amount
        - status
        - billingAccountId
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The work period payment id."
        workPeriodId:
          type: string
          format: uuid
          description: "The work period id."
        challengeId:
          type: string
          format: uuid
          description: "The challenge id."
        memberRate:
          type: number
          format: float
          example: 20.5
          description: "The member rate"
        customerRate:
          type: number
          format: float
          example: 15.5
          description: "The customer rate"
        days:
          type: integer
          minimum: 1
          maximum: 5
          example: 3
          description: "The workdays to pay"
        amount:
          type: integer
          example: 2
          description: "The amount to be paid."
        status:
          type: string
          enum: ["completed", "scheduled", "in-progress", "failed", "cancelled"]
          description: "The payment status."
        statusDetails:
          type: object
          properties:
            errorMessage:
              type: string
            errorCode:
              type: integer
            retry:
              type: integer
            step:
              type: string
            challengeId:
              type: string
              format: uuid
        billingAccountId:
          type: integer
          example: 80000071
          description: "the billing account id for payments"
        createdAt:
          type: string
          format: date-time
          description: "The work period payment created date."
        createdBy:
          type: string
          format: uuid
          description: "The user Id who created the work period payment.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The work period payment last updated at."
        updatedBy:
          type: string
          format: uuid
          description: "The user Id who updated the work period payment last time.(Will get the user info from the token)"
    WorkPeriodPaymentCreatedError:
      required:
        - workPeriodId
      properties:
        workPeriodId:
          type: string
          format: uuid
          description: "The work period id."
        amount:
          type: integer
          example: 2
          description: "The amount to be paid."
        error:
          type: object
          properties:
            message:
              type: string
              description: "The error message"
            code:
              type: integer
              example: 429
              description: "HTTP code of error"
    WorkPeriodPaymentCreateRequestBody:
      required:
        - workPeriodId
      properties:
        workPeriodId:
          type: string
          format: uuid
          description: "The work period id."
        days:
          type: integer
          minimum: 0
          maximum: 10
          example: 2
          description: "The workDays to be paid."
        amount:
          type: integer
          minimum: 1
          example: 200
          description: "The amount to be paid. Required only if days value is 0, otherwise forbidden."
    WorkPeriodPaymentQueryCreateRequestBody:
      properties:
        status:
          type: string
          enum: ["placed", "in-progress", "completed"]
          description: The resource booking status.
        startDate:
          type: string
          format: date
          description: The resource booking start date.
        endDate:
          type: string
          format: date
          description: The resource booking end date.
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: The resource booking rate type.
        jobId:
          type: string
          format: uuid
          description: The job id.
        userId:
          type: string
          example: '442321'
          description: 'The topcoder user id'
        projectId:
          type: integer
          description: The project id.
        projectIds:
          oneOf:
            - type: string
              description: comma separated project ids.
            - type: array
              items:
                type: integer
        workPeriods.paymentStatus:
          type: string
          enum: ["pending", "partially-completed", "failed"]
        workPeriods.startDate:
          type: string
          format: date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          description: The work period start date.
        workPeriods.endDate:
          type: string
          format: date
          pattern: '^\d{4}-\d{2}-\d{2}$'
          description: The work period end date.
        workPeriods.userHandle:
          type: string
          description: The user handle.
    WorkPeriodPaymentQueryCreateResult:
      properties:
        total:
          type: integer
          description: The total Work Periods found.
        totalSuccess:
          type: integer
          description: The total payments scheduled successfully.
        totalError:
          type: integer
          description: The total payments which failed to get scheduled.
        query:
          $ref: "#/components/schemas/WorkPeriodPaymentQueryCreateRequestBody"
    WorkPeriodPaymentPatchRequestBody:
      properties:
        status:
          type: string
          enum: ["scheduled", "cancelled"]
          description: "The payment status."
        memberRate:
          type: integer
          format: float
          example: 13
          description: "The member rate."
        customerRate:
          type: integer
          format: float
          example: 13
          description: "The customer rate."
        billingAccountId:
          type: integer
          example: 80000071
          description: "the billing account id for payments"
        days:
          type: integer
          minimum: 0
          example: 3
          description: "The workdays to pay"
        amount:
          type: integer
          format: float
          example: 2
          description: "The amount to be paid."
    WorkPeriodPaymentPatchRequestBodyInBulk:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
              description: "The work period payment id."
        - $ref: "#/components/schemas/WorkPeriodPaymentPatchRequestBody"
    WorkPeriodPaymentUpdatedError:
      allOf:
        - $ref: "#/components/schemas/WorkPeriodPaymentPatchRequestBodyInBulk"
        - type: object
          properties:
            error:
              type: object
              properties:
                message:
                  type: string
                  description: "The error message"
                code:
                  type: integer
                  example: 429
                  description: "HTTP code of error"
    CheckRun:
      type: object
      properties:
        checksRun:
          type: integer
      required:
        - checksRun
    Team:
      properties:
        id:
          type: string
          format: uuid
          description: "The team id."
        name:
          type: string
          example: "1212"
          description: "The team name."
        invites:
          type: array
          items:
            type: object
          description: "The invites of the project"
          example:
            [
              {
                "createdAt": "2021-02-08T09:21:00.885Z",
                "createdBy": 40159127,
                "deletedBy": null,
                "email": null,
                "id": 3008,
                "projectId": 16819,
                "role": "customer",
                "status": "pending",
                "updatedAt": "2021-02-08T09:21:00.885Z",
                "updatedBy": 40159127,
                "userId": 40153913,
              },
            ]
        members:
          type: array
          items:
            type: object
          description: "The members of the project"
          example:
            [
              {
                "lastName": "L_NAME",
                "role": "customer",
                "updatedBy": 21926562,
                "handle": "Tester123",
                "userId": 21926562,
                "deletedBy": null,
                "createdAt": "2021-01-12T10:58:26.237Z",
                "firstName": "F_NAME",
                "createdBy": 21926562,
                "isPrimary": false,
                "id": 13833,
                "projectId": 16893,
                "email": "email@domain.com.z",
                "updatedAt": "2021-01-12T10:58:26.237Z",
              },
            ]
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The end date."
        weeklyCost:
          type: number
          format: decimal
          example: 5000.50
          description: "The average weekly cost"
        totalPositions:
          type: integer
          description: "The sum of number of positions opening in all job"
        resources:
          type: array
          description: "The rosources that are assigned"
          items:
            $ref: "#/components/schemas/ResourceUserInfo"
    User:
      properties:
        id:
          type: string
          format: uuid
          description: "The user id."
        handle:
          type: string
          example: "Tony"
          description: "The project id."
        photo_url:
          type: string
          format: url
          example: "https://topcoder-dev-media.s3.amazonaws.com/member/profile/TonyJ-1604301092491.jpeg"
          description: "The user avatar."
        firstName:
          type: string
          example: "Tony"
          description: "The first name of user"
        lastName:
          type: string
          example: "J"
          description: "The last name of user"
    ResourceUserInfo:
      properties:
        id:
          type: string
          format: uuid
          description: "The resource booking id."
        userId:
          type: string
          example: '442321'
          description: "The topcoder user id."
        handle:
          type: string
          example: "Tony"
          description: "The project id."
        photo_url:
          type: string
          format: url
          example: "https://topcoder-dev-media.s3.amazonaws.com/member/profile/TonyJ-1604301092491.jpeg"
          description: "The user avatar."
        firstName:
          type: string
          example: "Tony"
          description: "The first name of user"
        lastName:
          type: string
          example: "J"
          description: "The last name of user"
    TeamDetail:
      properties:
        id:
          type: string
          format: uuid
          description: "The team id."
        name:
          type: string
          example: "1212"
          description: "The team name."
        invites:
          type: array
          items:
            type: object
          description: "The invites of the project"
          example:
            [
              {
                "createdAt": "2021-02-08T09:21:00.885Z",
                "createdBy": 40159127,
                "deletedBy": null,
                "email": null,
                "id": 3008,
                "projectId": 16819,
                "role": "customer",
                "status": "pending",
                "updatedAt": "2021-02-08T09:21:00.885Z",
                "updatedBy": 40159127,
                "userId": 40153913,
              },
            ]
        members:
          type: array
          items:
            type: object
          description: "The members of the project"
          example:
            [
              {
                "lastName": "L_NAME",
                "role": "customer",
                "updatedBy": 21926562,
                "handle": "Tester123",
                "userId": 21926562,
                "deletedBy": null,
                "createdAt": "2021-01-12T10:58:26.237Z",
                "firstName": "F_NAME",
                "createdBy": 21926562,
                "isPrimary": false,
                "id": 13833,
                "projectId": 16893,
                "email": "email@domain.com.z",
                "updatedAt": "2021-01-12T10:58:26.237Z",
              },
            ]
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The end date."
        weeklyCost:
          type: number
          format: decimal
          example: 5000.50
          description: "The average weekly cost"
        resources:
          type: array
          description: "The rosources that are assigned"
          items:
            allOf:
              - $ref: "#/components/schemas/ResourceUserInfo"
            type: object
            properties:
              customerRate:
                type: integer
                format: float
                example: 13
                description: "The customer rate."
              skills:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
              jobId:
                type: string
                format: uuid
                description: The job id the member is assinged at
              startDate:
                type: string
                format: date-time
                example: "2020-09-27T04:17:23.131Z"
                description: "Resource start date."
              endDate:
                type: string
                format: date-time
                example: "2020-09-27T04:17:23.131Z"
                description: "Resource end date."

        jobs:
          type: array
          description: "The jobs which are opened"
          items:
            $ref: "#/components/schemas/JobForTeam"
    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "The skill id."
        name:
          type: string
          example: "React"
          description: The skill name.
    SkillInSkillsAPI:
      required:
        - "id"
        - "name"
        - "taxonomyId"
        - "taxonomyName"
        - "metadata"
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The skill id"
        taxonomyId:
          type: "string"
          format: "UUID"
          description: "The referenced taxonomy id"
        taxonomyName:
          type: "string"
          description: "The referenced taxonomy name"
        name:
          type: "string"
          description: "The name of the skill"
        externalId:
          type: "string"
          description: "The external id for the skill"
        uri:
          type: "string"
          description: "The uri for the skill"
        metadata:
          type: "object"
          description: "The metadata for the skill"
          properties:
            updated:
              type: "string"
              format: "date-time"
              description: "The last updated timestamp of the skill"
            challengeProminence:
              type: "string"
              description: "The challenge prominence ranging from [0, 1]"
            memberProminence:
              type: "string"
              description: "The member prominence ranging from [0, 1]"
    JobForTeam:
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        title:
          type: string
          example: "Dummy title"
          description: "The job title."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        duration:
          type: integer
          example: 1
          description: "The duration in weeks"
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        rateType:
          type: string
          enum: ["hourly", "daily", "weekly", "monthly"]
          description: "The rate type of the job."
        skills:
          type: array
          description: "The skills."
          items:
            $ref: "#/components/schemas/Skill"
        customerRate:
          type: integer
          format: float
          example: 5500
          description: "The customer rate."
        status:
          type: string
          enum: ["sourcing", "in-review", "assigned", "closed", "cancelled"]
          description: "The job status."
    JobDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        title:
          type: string
          example: "Dummy title"
          description: "The job title."
        candidates:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/User"
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: "The job candidate id."
              userId:
                type: string
                example: '44231'
                description: "The topcoder user id."
              resume:
                type: string
                format: url
                description: "The link for the resume that can be downloaded"
              remark:
                type: string
                example: "excellent"
                description: "The remark of candidate"
              interviews:
                type: array
                items:
                  $ref: "#/components/schemas/CandidateInterview"
              status:
                type: string
                enum:
                  [
                    "open",
                    "placed",
                    "selected",
                    "client rejected - screening",
                    "client rejected - interview",
                    "rejected - other",
                    "cancelled",
                    "interview",
                    "topcoder-rejected",
                    "applied",
                    "rejected-pre-screen",
                    "skills-test",
                    "phone-screen",
                    "job-closed",
                    "offered",
                    "withdrawn",
                    "withdrawn-prescreen",
                  ]
                description: "The job candidate status."
              skills:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
    TeamJobDescriptionRequestBody:
      type: object
      properties:
        description:
          type: string
          description: "job description"
          example: "nodejs and java"

    TeamEmailRequestBody:
      type: object
      properties:
        template:
          type: string
          description: "the email template name"
          example: "team-issue-report"
        data:
          type: object
          example:
            {
              "projectName": "TaaS Project Name",
              "projectId": 12345,
              "reportText": "I have issue with ...",
            }
          description: "Arbitrary data to feed the specified template"
    AddMembersRequestBody:
      properties:
        handles:
          type: array
          description: "The handles."
          items:
            type: string
            description: "the handle of a member"
            example: topcoder321
        emails:
          type: array
          description: "The emails."
          items:
            type: string
            description: "the email of a member"
            example: "xxx@xxx.com"
    AddMembersResponseBody:
      properties:
        success:
          type: array
          description: "The members created."
          items:
            $ref: "#/components/schemas/ProjectMember"
        failed:
          type: array
          description: "The emails."
          items:
            oneOf:
              - type: object
                properties:
                  error:
                    type: string
                    description: the error message
                    example: "User doesn't exist"
                  handle:
                    type: string
                    description: "the handle of a member"
                    example: topcoder321
              - type: object
                properties:
                  error:
                    type: string
                    description: the error message
                    example: "User is already added"
                  email:
                    type: string
                    description: "the email of a member"
                    example: "xxx@xxx.com"
    RoleSearchRequestBody:
      anyOf:
        - type: object
          required:
            - roleId
          properties:
            roleId:
              type: string
              format: uuid
              description: "The role id."
        - type: object
          required:
            - jobDescription
          properties:
            jobDescription:
              type: string
              description: "The description of the job."
            jobTitle:
              type: string
              description: "An optional job title."
        - type: object
          required:
            - skills
          properties:
            skills:
              type: array
              description: "The array of skill ids."
              items:
                type: string
                format: uuid
                description: "The skill id"

    RoleSearchResponse:
      allOf:
        - $ref: "#/components/schemas/Role"
        - type: object
          required:
            - roleSearchRequestId
            - isExternalMember
          properties:
            roleSearchRequestId:
              type: string
              format: uuid
              description: "The role search request id."
            isExternalMember:
              type: boolean
              description: "Is the user external member"
            matchedSkills:
              type: array
              items:
                type: string
                example: "java"
              description: "skills match with the role"
            unMatchedSkills:
              type: array
              items:
                type: string
                example: "javascript"
              description: "skills unmatch with the role"
            skillsMatch:
              type: number
              format: float
              description: "Rate at which searched skills match the given role"
              example: 0.75
            jobTitle:
              type: string
              description: "Optional job title."
              example: "Lead Application Developer"
    CalculateAmountRequestBody:
      properties:
        numberOfResources:
          type: number
          description: "No. of resources required."
        rate:
          type: number
          description: "Weekly rates"
    CalculateAmountResponse:
      properties:
        totalAmount:
          type: number
          description: "Total amount calculated"
    CreatePaymentRequestBody:
      properties:
        totalAmount:
          type: number
          description: "Total amount charged to user via stripe"
    CreatePaymentResponse:
      properties:
        paymentIntentToken:
          type: string
          description: " Token required by stripe for completing payment."
    IsExternalMemberRequestBody:
      properties:
        totalAmount:
          type: number
          description: "Member id"
    IsExternalMemberResponse:
      properties:
        paymentIntentToken:
          type: boolean
          description: "Is the user external member"
    SubmitTeamRequestBody:
      properties:
        teamName:
          type: string
          description: "The name of the team"
        teamDescription:
          type: string
          description: "The description of the team"
        refCode:
          type: string
          description: "Optional referral code"
        intakeSource:
          type: string
          description: "The source of the intake."
        positions:
          type: array
          description: "The array of positions"
          items:
            type: object
            required:
              - roleName
              - roleSearchRequestId
              - numberOfResources
            properties:
              roleName:
                type: string
                description: "The name of the role"
              roleSearchRequestId:
                type: string
                format: uuid
                description: "The id of roleSearchRequest"
              numberOfResources:
                type: integer
                example: 10
                minimum: 1
                description: "The number of needed resources"
              hoursPerWeek:
                type: integer
                example: 40
                minimum: 1
                description: "The amount of working hours per week"
              durationWeeks:
                type: integer
                example: 5
                minimum: 1
                description: "The amount of time in weeks"
              startMonth:
                type: string
                format: date-time
                description: "The start day of the job"
    SubmitTeamResponse:
      required:
        - projectId
      properties:
        projectId:
          type: string
          format: uuid
          description: "The id of created project"
    Role:
      required:
        - id
        - name
        - rates
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The role id."
        name:
          type: string
          example: "Dev Ops Engineer"
          description: "The role name."
        description:
          type: string
          example: "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates."
          description: "The role description"
        listOfSkills:
          type: array
          description: "The array of skill names."
          items:
            type: string
            example: "HTML"
            description: "The skill name"
        rates:
          type: array
          description: "The rates object array."
          items:
            $ref: "#/components/schemas/RoleRates"
        numberOfMembers:
          type: number
          example: 100
          description: "The number of members."
        numberOfMembersAvailable:
          type: integer
          example: 100
          description: "The number of members available."
        imageUrl:
          type: string
          format: url
          example: "http://images.topcoder.com/images"
          description: "The image url of the role."
        timeToCandidate:
          type: integer
          example: 200
          description: "The time to candidate."
        timeToInterview:
          type: integer
          example: 300
          description: "The time to interview."
        createdAt:
          type: string
          format: date-time
          description: "The role created date."
        createdBy:
          type: string
          format: uuid
          description: "The user Id who created the role.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The role last updated at."
        updatedBy:
          type: string
          format: uuid
          description: "The user Id who updated the role last time.(Will get the user info from the token)"
    SuggestedMember:
      properties:
        userId:
          type: number
          example: 40157055
          description: 'The topcoder user id'
        handle:
          type: string
          example: maxceemdev
          description: the user handle
        photoURL:
          type: string
          example: https://topcoder-dev-media.s3.amazonaws.com/member/profile/maxceem13-1587184611143.jpeg
          description: the photo url
        firstName:
          type: string
          example: Max
          description: the firstname of the user
        lastName:
          type: string
          example: Max
          description: the lastname of the user
        maxRating:
          type: number
          example: 1200
          description: the maximum rating of the user
    RoleRequestBody:
      required:
        - name
        - rates
      properties:
        name:
          type: string
          example: "Dev Ops Engineer"
          description: "The role name."
        description:
          type: string
          example: "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates."
          description: "The role description"
        listOfSkills:
          type: array
          description: "The array of skill names."
          items:
            type: string
            example: "HTML"
            description: "The skill name"
        rates:
          type: array
          description: "The rates object array."
          items:
            $ref: "#/components/schemas/RoleRates"
        numberOfMembers:
          type: number
          example: 100
          description: "The number of members."
        numberOfMembersAvailable:
          type: number
          example: 100
          description: "The number of members available."
        imageUrl:
          type: string
          format: url
          example: "http://images.topcoder.com/images"
          description: "The image url of the role."
        timeToCandidate:
          type: integer
          example: 200
          description: "The time to candidate."
        timeToInterview:
          type: integer
          example: 300
          description: "The time to interview."
    RolePatchRequestBody:
      properties:
        name:
          type: string
          example: "Dev Ops Engineer"
          description: "The role name."
        description:
          type: string
          example: "A DevOps engineer introduces processes, tools, and methodologies to balance needs throughout the software development life cycle, from coding and deployment, to maintenance and updates."
          description: "The role description"
        listOfSkills:
          type: array
          description: "The array of skill names."
          items:
            type: string
            example: "HTML"
            description: "The skill name"
        rates:
          type: array
          description: "The rates object array."
          items:
            $ref: "#/components/schemas/RoleRates"
        numberOfMembers:
          type: number
          example: 100
          description: "The number of members."
        numberOfMembersAvailable:
          type: number
          example: 100
          description: "The number of members available."
        imageUrl:
          type: string
          format: url
          example: "http://images.topcoder.com/images"
          description: "The image url of the role."
        timeToCandidate:
          type: integer
          example: 200
          description: "The time to candidate."
        timeToInterview:
          type: integer
          example: 300
          description: "The time to interview."
    RoleRates:
      type: object
      properties:
        niche:
          type: integer
          example: 10
        global:
          type: integer
          example: 10
        inCountry:
          type: integer
          example: 20
        offShore:
          type: integer
          example: 30
        rate30Niche:
          type: integer
          example: 10
        rate30Global:
          type: integer
          example: 10
        rate30InCountry:
          type: integer
          example: 20
        rate30OffShore:
          type: integer
          example: 30
        rate20Niche:
          type: integer
          example: 10
        rate20Global:
          type: integer
          example: 10
        rate20InCountry:
          type: integer
          example: 20
        rate20OffShore:
          type: integer
          example: 30
    ProjectMember:
      type: object
      example:
        {
          "id": 14329,
          "userId": 40159097,
          "role": "customer",
          "createdAt": "2021-02-24T12:34:45.074Z",
          "updatedAt": "2021-02-24T12:34:45.075Z",
          "createdBy": -101,
          "updatedBy": -101,
          "handle": "tester1234",
          "photoURL": null,
          "workingHourStart": "9:00",
          "workingHourEnd": "17:00",
          "timeZone": "Asia/Kolkata",
          "email": "xxx@xxx.com",
        }
    ProjectMemberInvite:
      type: object
      example:
        {
          "createdAt": "2021-02-24T11:02:12.673Z",
          "deletedAt": null,
          "role": "customer",
          "updatedBy": -101,
          "createdBy": -101,
          "id": 3686,
          "projectId": 16705,
          "userId": 23008602,
          "email": null,
          "deletedBy": null,
          "updatedAt": "2021-02-24T11:02:12.674Z",
          "status": "pending",
        }
    UbahnUser:
      type: object
      example:
        {
          "lastName": "DeLaurentis",
          "updatedBy": "tcAdmin",
          "achievements":
            [
              {
                "certifierId": "certifierId",
                "updatedBy": "tcAdmin",
                "createdBy": "tc-user",
                "certifiedDate": "2020-05-04T07:36:28.036Z",
                "created": "2020-05-13T08:44:27.244Z",
                "name": "Topcoder",
                "id": "a49e1013-fd42-4c08-bc12-492510cadb96",
                "achievementsProviderId": "ce05133f-129e-484d-9ef9-72bf51ff81f9",
                "uri": "http://www.google.com/xx",
                "updated": "2021-01-05T10:58:32.429Z",
                "userId": "0bcb0d86-09bb-410a-b2b1-fba90d1a7699",
                "achievementprovider":
                  {
                    "updatedBy": "tcAdmin",
                    "createdBy": "tc-user",
                    "created": "2020-05-13T08:42:41.877Z",
                    "name": "achievementsProviders_02",
                    "id": "ce05133f-129e-484d-9ef9-72bf51ff81f9",
                    "updated": "2021-01-05T10:58:32.341Z",
                  },
              },
            ],
          "created": "2020-05-05T10:18:03.882Z",
          "handle": "lazybaer",
          "skills":
            [
              {
                "certifierId": null,
                "skillId": "d67f35c3-fa42-4866-a0f9-0a4b84fcf4a9",
                "updatedBy": "tcAdmin",
                "createdBy": "lazybaer",
                "certifiedDate": null,
                "created": "2020-10-23T16:22:11.208Z",
                "skill":
                  {
                    "updatedBy": "tcAdmin",
                    "skillprovider":
                      {
                        "updatedBy": "tcAdmin",
                        "createdBy": "TonyJ",
                        "created": "2020-08-31T12:30:00.543Z",
                        "name": "Wipro Digital",
                        "id": "26fb37b1-5f9f-4727-baa9-f3c87de84ab1",
                        "updated": "2021-01-05T10:58:32.836Z",
                      },
                    "createdBy": "0",
                    "created": "2020-09-01T21:59:21.554Z",
                    "skillProviderId": "26fb37b1-5f9f-4727-baa9-f3c87de84ab1",
                    "name": "GitHub",
                    "externalId": null,
                    "id": "d67f35c3-fa42-4866-a0f9-0a4b84fcf4a9",
                    "uri": null,
                    "updated": "2021-01-05T10:58:33.332Z",
                  },
                "metricValue": null,
                "id": "8a84c1b4-1884-4a3c-90b2-eb86bf469bb6",
                "updated": "2021-01-05T10:58:34.080Z",
                "userId": "0bcb0d86-09bb-410a-b2b1-fba90d1a7699",
              },
            ],
          "firstName": "Christopher",
          "externalProfiles":
            [
              {
                "organizationId": "0d2320f9-be61-4ba4-973e-edc3bb682a69",
                "updatedBy": "tcAdmin",
                "createdBy": "TonyJ",
                "isInactive": false,
                "created": "2020-08-31T12:30:38.495Z",
                "organization":
                  {
                    "updatedBy": "tcAdmin",
                    "createdBy": "TonyJ",
                    "created": "2020-08-31T12:29:58.081Z",
                    "name": "Wipro Digital",
                    "skillProviders":
                      [
                        {
                          "organizationId": "0d2320f9-be61-4ba4-973e-edc3bb682a69",
                          "updatedBy": "tcAdmin",
                          "createdBy": "TonyJ",
                          "created": "2020-08-31T12:30:08.410Z",
                          "skillProviderId": "26fb37b1-5f9f-4727-baa9-f3c87de84ab1",
                          "id": "5b26cdd3-fe68-4b30-85c5-ceaf280bd688",
                          "updated": "2021-01-05T10:58:32.919Z",
                        },
                      ],
                    "id": "0d2320f9-be61-4ba4-973e-edc3bb682a69",
                    "updated": "2021-01-05T10:58:32.261Z",
                  },
                "externalId": "8547899",
                "id": "870af97b-8c3b-4659-92d6-cac126bbe9de",
                "uri": null,
                "updated": "2021-01-05T10:58:32.724Z",
                "userId": "0bcb0d86-09bb-410a-b2b1-fba90d1a7699",
              },
            ],
          "createdBy": "tc-Copilot",
          "attributes":
            [
              {
                "attributeId": "d709276a-80c3-491c-9b29-a4f065b2a56f",
                "updatedBy": "tcAdmin",
                "createdBy": "tc-Admin",
                "created": "2020-05-13T08:19:13.709Z",
                "id": "21de9324-900d-41ea-b127-f297dfb9a873",
                "attribute":
                  {
                    "updatedBy": "tcAdmin",
                    "attributegroup":
                      {
                        "organizationId": "36ed815b-3da1-49f1-a043-aaed0a4e81ad",
                        "updatedBy": "tc-Admin",
                        "createdBy": "tc-Admin",
                        "created": "2020-05-13T07:15:01.215Z",
                        "name": "group 03",
                        "id": "84634bbd-8191-40cf-a03e-9962d7e39fda",
                        "updated": "2020-05-13T07:16:20.636Z",
                      },
                    "createdBy": "tc-Admin",
                    "created": "2020-05-13T07:32:03.128Z",
                    "name": "Billing Account",
                    "id": "d709276a-80c3-491c-9b29-a4f065b2a56f",
                    "attributeGroupId": "84634bbd-8191-40cf-a03e-9962d7e39fda",
                    "updated": "2021-01-05T10:58:32.604Z",
                  },
                "value": "74314457",
                "updated": "2021-01-05T10:58:33.739Z",
                "userId": "0bcb0d86-09bb-410a-b2b1-fba90d1a7699",
              },
            ],
          "id": "0bcb0d86-09bb-410a-b2b1-fba90d1a7699",
          "updated": "2021-01-05T10:58:32.113Z",
        }
    UserMeetingSettings:
      type: object
      properties:
        userId:
          type: string
          example: '442321'
          description: 'The topcoder user id'
        defaultAvailableTime:
          type: array
          items:
            type: object
            required:
              - days
              - start
              - end
            properties:
              days:
                type: array
                items:
                  type: string
                  enum: ["M", "T", "W", "R", "F", "S", "U"]
              start:
                type: string
                example: "09:00"
                pattern: "^[0-9]{1,2}:[0-9]{2}$"
              end:
                type: string
                example: "10:00"
                pattern: "^[0-9]{1,2}:[0-9]{2}$"
        defaultTimezone:
          type: string
          example: "Europe/Rome"
        nylasCalendars:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              isPrimary:
                type: boolean
              accountProvider:
                type: string
        createdAt:
          type: string
          format: date-time
          description: "The setting created date."
        createdBy:
          type: string
          format: uuid
          description: "The user Id who created the setting.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The setting last updated at."
        updatedBy:
          type: string
          format: uuid
          description: "The user Id who updated the setting last time.(Will get the user info from the token)"


    Error:
      required:
        - message
      properties:
        message:
          type: string
