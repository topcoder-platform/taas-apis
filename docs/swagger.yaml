openapi: 3.0.0
info:
  title: Bookings microservice
  description: Bookings microservice
  version: 1.0.0
servers:
- url: /api/{apiVersion}/
  variables:
    apiVersion:
      default: 'v5'
      description: The REST API version
tags:
  - name: Jobs
  - name: JobCandidates
  - name: ResourceBookings
  - name: Teams
paths:
  /jobs:
    post:
      tags:
        - Jobs
      description: |
        Create job.

        **Authorization** All topcoder members are allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Jobs
      description: |
        Search jobs.

        **Authorization** All topcoder members are allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum: ['id','createdAt','startDate','endDate','rateType','status']
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ['desc','asc']
          description: The sort order.
        - in: query
          name: projectId
          required: false
          schema:
            type: integer
          description: The project id.
        - in: query
          name: projectIds
          required: false
          schema:
            type: string
          description: The project ids, separated by commas.
        - in: query
          name: externalId
          required: false
          schema:
            type: string
          description: The external id.
        - in: query
          name: description
          required: false
          schema:
            type: string
          description: The description.
        - in: query
          name: title
          required: false
          schema:
            type: string
            maxLength: 64
          description: The title.
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date-time
          description: The job start date.
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date-time
          description: The job end date.
        - in: query
          name: resourceType
          required: false
          schema:
            type: string
          description: The resource type.
        - in: query
          name: skill
          required: false
          schema:
            type: string
          description: The skill.
        - in: query
          name: workload
          required: false
          schema:
            type: string
            enum: ['full-time', 'fractional']
          description: The rate type.
        - in: query
          name: rateType
          required: false
          schema:
            type: string
            enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: The rate type.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: ['sourcing', 'in-review', 'assigned', 'closed', 'cancelled']
          description: The rate type.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
                    
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /jobs/{id}:
    get:
      tags: 
        - Jobs
      description: |
        Get job information by id.
        
        **Authorization** All topcoder members are allowed
      security:
        - bearerAuth: []
      parameters: 
        - in: path
          name: id
          description: The job id.
          required: true
          schema:
            type: string
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: 
        - Jobs
      description: | 
        Delete the job.

        **Authorization** Every topcoder member can delete the job he/she created. bookingmanager can delete all jobs.
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "The id of job."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: 
        - Jobs
      description: |
        Update the job.

        **Authorization** Every topcoder member can update the job he/she created. bookingmanager and connectmember can update all jobs.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of job
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                  - $ref: '#/components/schemas/JobRequestBody'
                  - $ref: '#/components/schemas/JobPatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags: 
        - Jobs
      description: |
        Update job.

        **Authorization** Topcoder token with patch job scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id job.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /jobCandidates:
    post:
      tags:
        - JobCandidates
      description: |
        Create Job candidate.

        **Authorization** Topcoder token with write JobCandidate scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCandidateRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCandidate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - JobCandidates
      description: |
        Search job candidate.

        **Authorization** Topcoder token with read JobCandidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum: ['id','status']
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ['desc','asc']
        - in: query
          name: jobId
          required: false
          schema:
            type: string
            format: uuid
          description: The job id.
        - in: query
          name: userId
          required: false
          schema:
            type: string
            format: uuid
          description: The user id.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: ['open', 'selected', 'shortlist', 'rejected', 'cancelled']
          description: The job candidate status.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobCandidate'
                    
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /jobCandidates/{id}:
    get:
      tags: 
        - JobCandidates
      description: |
        Get job candidate information by id.
        
        **Authorization** Topcoder token with read job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters: 
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCandidate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: 
        - JobCandidates
      description: | 
        Delete the job.

        **Authorization** Topcoder token with delete job candidate scope is allowed
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: 
        - JobCandidates
      description: |
        Update the job candidate.

        **Authorization** Topcoder token with update JobCandidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JobCandidateRequestBody'
                - $ref: '#/components/schemas/JobCandidatePatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCandidate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags: 
        - JobCandidates
      description: |
        Partail update job candidate.

        **Authorization** Topcoder token with update Job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The job candidate id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCandidatePatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCandidate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resourceBookings:
    post:
      tags:
        - ResourceBookings
      description: |
        Create Resource booking.

        **Authorization** Topcoder token with write Resource booking scope is allowed
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceBookingRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceBooking'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - ResourceBookings
      description: |
        Search resource booking.

        **Authorization** Topcoder token with read resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: id
            enum: ['id','status','startDate','endDate','rateType','customerRate','memberRate']
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ['desc','asc']
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: ['assigned', 'in-progress', 'completed']
          description: The status.
        - in: query
          name: startDate
          required: false
          schema:
            type: string
            format: date-time
          description: The resource booking start date.
        - in: query
          name: endDate
          required: false
          schema:
            type: string
            format: date-time
          description: The resource booking end date.
        - in: query
          name: rateType
          required: false
          schema:
            type: string
            enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: The rate type.
          
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceBooking'
                    
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resourceBookings/{id}:
    get:
      tags: 
        - ResourceBookings
      description: |
        Get resource booking by id.
        
        **Authorization** Topcoder token with read resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters: 
        - in: path
          name: id
          description: The resource booking id.
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fromDb
          description: get data from db or not.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceBooking'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: 
        - ResourceBookings
      description: | 
        Delete the resource booking.

        **Authorization** Topcoder token with delete resource booking scope is allowed
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of resource booking.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: 
        - ResourceBookings
      description: |
        Update the resource booking.

        **Authorization** Topcoder token with update resource booking scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of resource booking.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ResourceBookingRequestBody'
                - $ref: '#/components/schemas/ResourceBookingPatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceBooking'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags: 
        - ResourceBookings
      description: |
        Partial Update resource booking.

        **Authorization** Topcoder token with update job candidate scope is allowed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: The id of resource booking.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceBookingPatchRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceBooking'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /taas-teams:
    get:
      tags:
        - Teams
      description: |
        Search my teams. Teams is project in topcoder with type=='talent-as-a-service'
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: createdAt
            enum: ['createdAt', 'updatedAt', 'lastActivityAt', 'id', 'status', 'name', 'type', 'best match']
          description: The sort by column.
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            default: desc
            enum: ['desc','asc']
          description: The sort order. Not allowed when sortBy is `best match`.
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: filter by name, case-insensitive; support wildcard match.
          example: '*taas*'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /taas-teams/{id}:
    get:
      tags:
        - Teams
      description: |
        Gets the team details. Should check if user has permission on the project or not by checking if he is connect user or not
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDetail'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /taas-teams/{id}/jobs/{jobId}:
    get:
      tags:
        - Teams
      description: |
        Gets the job details including all candidates. Should check if user has permission on the project or not by checking if he is connect user or not
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The team/project id.
        - in: path
          name: jobId
          required: true
          schema:
            type: string
            format: uuid
          description: The job id.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetail'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /taas-teams/skills:
    get:
      tags:
        - Teams
      description: |
        Serves as a proxy endpoint for /v5/skills, allowing to be accessed by any topcoder user.
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: The page number.
        - in: query
          name: perPage
          required: false
          schema:
            type: integer
            default: 20
          description: The number of items to list per page.
        - name: orderBy
          in: query
          schema:
            type: string
          description: "Specify by which field to sort by. Sorts in ascending order only"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UbahnSkill'
          headers:
            X-Next-Page:
              schema:
                type: integer
                description: The index of the next page
            X-Page:
              schema:
                type: integer
                description: The index of the current page (starting at 1)
            X-Per-Page:
              schema:
                type: integer
                description: The number of items to list per page
            X-Prev-Page:
              schema:
                type: integer
                description: The index of the previous page
            X-Total:
              schema:
                type: integer
                description: The total number of items
            X-Total-Pages:
              schema:
                type: integer
                description: The total number of pages
            Link:
              schema:
                type: string
                description: Pagination link header.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /health:
    get:
      tags:
        - Health
      description: |
        Get health status of the app.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckRun'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckRun'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Job:
      required:
        - id
        - projectId
        - externalId
        - description
        - title
        - startDate
        - endDate
        - numPositions
        - resourceType
        - rateType
        - skills
        - status
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        projectId:
          type: integer
          example: 21
          description: "The project id."
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        title:
          type: string
          example: "Dummy title"
          description: "The title."
          maxLength: 64
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        resourceType:
          type: string
          example: "Dummy Resource Type"
          description: "The resource type of job."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
        workload:
          type: string
          enum: ['full-time', 'fractional']
          description: "The workload of the job."
        skills:
          type: array
          description: "The skills."
          items:
            type: string
            format: uuid
            description: "The skill id."
        status:
          type: string
          enum: ['sourcing', 'in-review', 'assigned', 'closed', 'cancelled']
          description: "The job status."
        candidates:
          type: array
          description: "The job candidates."
          items:
            $ref: '#/components/schemas/JobCandidate'
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: 'topocder user'
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: 'topcoder user'
          description: "The user who updated the job last time.(Will get the user info from the token)"
    JobRequestBody:
      required:
        - projectId
        - externalId
        - description
        - title
        - startDate
        - endDate
        - numPositions
        - resourceType
        - rateType
        - skills
      properties:
        projectId:
          type: integer
          example: 21
          description: "The project id."
        externalId:
          type: string
          example: "1212"
          description: "The external id."
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        title:
          type: string
          example: "Dummy title"
          description: "The title."
          maxLength: 64
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        resourceType:
          type: string
          example: "Dummy Resource Type"
          description: "The resource type of job."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
        workload:
          type: string
          enum: ['full-time', 'fractional']
          description: "The workload of the job."
        skills:
          type: array
          description: "The skills."
          items:
            type: string
            format: uuid
            description: "The skill id."
    JobCandidate:
      required: 
        - id
        - jobId
        - userId
        - status
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        jobId:
          type: string
          format: uuid
          description: "The project id."
        userId:
          type: string
          format: uuid
          example: "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a"
          description: "The user id."
        status:
          type: string
          enum: ['open', 'selected', 'shortlist', 'rejected', 'cancelled']
          description: "The job candidate status."
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: 'topocder user'
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: 'topcoder user'
          description: "The user who updated the job last time.(Will get the user info from the token)"
    JobCandidateRequestBody:
      required: 
        - jobId
        - userId
      properties:
        jobId:
          type: string
          format: uuid
          description: "The project id."
        userId:
          type: string
          format: uuid
          example: "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a"
          description: "The user id."
    JobCandidatePatchRequestBody:
      properties:
        status:
          type: string
          enum: ['open', 'selected', 'shortlist', 'rejected', 'cancelled']
    JobPatchRequestBody:
      properties:
        status:
          type: string
          enum: ['sourcing', 'in-review', 'assigned', 'closed', 'cancelled']
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        resourceType:
          type: string
          example: "Dummy Resource Type"
          description: "The resource type of job."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
        workload:
          type: string
          enum: ['full-time', 'fractional']
          description: "The workload of the job."
        skills:
          type: array
          description: "The skills."
          items:
            type: string
            format: uuid
            description: "The skill id."
    ResourceBooking:
      required:
        - id
        - projectId
        - userId
        - status
        - startDate
        - endDate
        - memberRate
        - customerRate
        - rateType
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        projectId:
          type: integer
          example: 21
          description: "The project id."
        userId:
          type: string
          format: uuid
          example: "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a"
          description: "The external id."
        jobId:
          type: string
          format: uuid
          description: "The external id."
        status:
          type: string
          enum: ['sourcing', 'in-review', 'assigned', 'closed', 'cancelled']
          description: "The job status."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        memberRate:
          type: integer
          format: float
          example: 13
          description: "The member rate."
        customerRate:
          type: integer
          format: float
          example: 13
          description: "The customer rate."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
        createdAt:
          type: string
          format: date-time
          description: "The job created date."
        createdBy:
          type: string
          example: 'topocder user'
          description: "The user who created the job.(Will get the user info from the token)"
        updatedAt:
          type: string
          format: date-time
          description: "The job last updated at."
        updatedBy:
          type: string
          example: 'topcoder user'
          description: "The user who updated the job last time.(Will get the user info from the token)"
    ResourceBookingRequestBody:
      required:
        - projectId
        - userId
        - status
        - startDate
        - endDate
        - memberRate
        - customerRate
        - rateType
      properties:
        projectId:
          type: integer
          example: 21
          description: "The project id."
        userId:
          type: string
          format: uuid
          example: "a55fe1bc-1754-45fa-9adc-cf3d6d7c377a"
          description: "The external id."
        jobId:
          type: string
          format: uuid
          description: "The job id."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        memberRate:
          type: number
          format: float
          example: 13.23
          description: "The member rate."
        customerRate:
          type: number
          format: float
          example: 13
          description: "The customer rate."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
    ResourceBookingPatchRequestBody:
      properties:
        status:
          type: string
          enum: ['sourcing', 'in-review', 'assigned', 'closed', 'cancelled']
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        memberRate:
          type: number
          format: float
          example: 13.23
          description: "The member rate."
        customerRate:
          type: number
          format: float
          example: 13
          description: "The customer rate."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
    CheckRun:
      type: object
      properties:
        checksRun:
          type: integer
      required:
        - checksRun
    Team:
      properties:
        id:
          type: string
          format: uuid
          description: "The team id."
        name:
          type: string
          example: "1212"
          description: "The team name."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The end date."
        weeklyCost:
          type: number
          format: decimal
          example: 5000.50  
          description: "The average weekly cost"
        totalPositions:
          type: integer
          description: 'The sum of number of positions opening in all job'
        resources: 
          type: array
          description: "The rosources that are assigned"
          items:
            $ref: '#/components/schemas/User'
    User:
      properties:
        id:
          type: string
          format: uuid
          description: "The user id."
        handle:
          type: string
          example: "Tony"
          description: "The project id."
        photo_url:
          type: string
          format: url
          example: "https://topcoder-dev-media.s3.amazonaws.com/member/profile/TonyJ-1604301092491.jpeg"
          description: "The user avatar."
        firstName:
                type: string
                example: 'Tony'
                description: 'The first name of user'
        lastName:
          type: string
          example: 'J'
          description: 'The last name of user'
    TeamDetail:
      properties:
        id:
          type: string
          format: uuid
          description: "The team id."
        name:
          type: string
          example: "1212"
          description: "The team name."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The end date."
        weeklyCost:
          type: number
          format: decimal
          example: 5000.50  
          description: "The average weekly cost"
        resources: 
          type: array
          description: "The rosources that are assigned"
          items:
            allOf: 
             - $ref: '#/components/schemas/User'
            type: object
            properties:
              customerRate:
                type: integer
                format: float
                example: 13
                description: "The customer rate."
              skills: 
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
              jobId:
                type: string
                format: uuid
                description: The job id the member is assinged at
              startDate:
                type: string
                format: date-time
                example: "2020-09-27T04:17:23.131Z"
                description: "Resource start date."
              endDate:
                type: string
                format: date-time
                example: "2020-09-27T04:17:23.131Z"
                description: "Resource end date."
                 
        jobs: 
          type: array
          description: "The jobs which are opened"
          items:
            $ref: '#/components/schemas/JobForTeam'
    Skill: 
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "The skill id."
        name: 
          type: string
          example: 'React'
          description: The skill name.
    UbahnSkill:
      type: object
      properties:
        id:
          type: "string"
          format: "UUID"
          description: "The skill id"
        skillProviderId:
          type: "string"
          format: "UUID"
          description: "The referenced skill provider id"
        name:
          type: "string"
          description: "The name of the skill"
        externalId:
          type: "string"
          description: "The external id for the skill"
        uri:
          type: "string"
          description: "The uri for the skill"
        created:
          type: "string"
          format: "date-time"
          description: "When the entity was created."
        updated:
          type: "string"
          format: "date-time"
          description: "When the entity was updated."
        createdBy:
          type: "string"
          format: "UUID"
          description: "Creator of the entity."
        updatedBy:
          type: "string"
          format: "UUID"
          description: "User that last updated the entity."
    JobForTeam:
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        startDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job start date."
        endDate:
          type: string
          format: date-time
          example: "2020-09-27T04:17:23.131Z"
          description: "The job end date."
        numPositions:
          type: integer
          example: 13
          description: "The number of positions for the job."
        rateType:
          type: string
          enum: ['hourly', 'daily', 'weekly', 'monthly']
          description: "The rate type of the job."
        skills:
          type: array
          description: "The skills."
          items:
            $ref: '#/components/schemas/Skill'
        customerRate:
          type: integer
          format: float
          example: 5500
          description: "The customer rate."
        status:
          type: string
          enum: ['sourcing', 'in-review', 'assigned', 'closed', 'cancelled']
          description: "The job status."
    JobDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "The job id."
        description:
          type: string
          example: "Dummy Description"
          description: "The description."
        candidates:
          type: array
          items:
            allOf: 
               - $ref: '#/components/schemas/User'
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: "The job cadidate id."
              userId:
                type: string
                format: uuid
                description: "User id."
              resumeLink: 
                type: string
                format: url
                description: 'The link for the resume that can be downloaded'
              status:
                type: string
                enum: ['open', 'selected', 'shortlist', 'rejected', 'cancelled']
                description: "The job candidate status."
              skills: 
                  type: array
                  items:
                    $ref: '#/components/schemas/Skill'
    Error:
      required:
        - message
      properties:
        message:
          type: string
